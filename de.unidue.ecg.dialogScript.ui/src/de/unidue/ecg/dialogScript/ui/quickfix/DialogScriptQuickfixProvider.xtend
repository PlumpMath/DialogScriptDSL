/*
* generated by Xtext
*/
package de.unidue.ecg.dialogScript.ui.quickfix

import com.google.inject.Inject
import de.unidue.ecg.dialogScript.dialogScript.ConditionList
import de.unidue.ecg.dialogScript.dialogScript.Conditional
import de.unidue.ecg.dialogScript.dialogScript.DialogScriptFactory
import de.unidue.ecg.dialogScript.dialogScript.DialogScriptPackage
import de.unidue.ecg.dialogScript.dialogScript.Hub
import de.unidue.ecg.dialogScript.dialogScript.Modifier
import de.unidue.ecg.dialogScript.dialogScript.Script
import de.unidue.ecg.dialogScript.dialogScript.Switch
import de.unidue.ecg.dialogScript.dialogScript.SwitchOff
import de.unidue.ecg.dialogScript.dialogScript.SwitchOn
import de.unidue.ecg.dialogScript.dialogScript.SwitchValue 
import de.unidue.ecg.common.linking.CustomLinkingDiagnosticMessageProvider
import de.unidue.ecg.dialogScript.validation.DialogScriptValidator
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.diagnostics.Diagnostic
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import de.unidue.ecg.dialogScript.dialogScript.DialogLine


//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue
/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class DialogScriptQuickfixProvider extends DefaultQuickfixProvider {
	@Inject
	CustomLinkingDiagnosticMessageProvider customLinkingDiagnosticMessageProvider

	/**
	 * TODO: Check for programmatic execution of rename refactoring for these rename quickfixes 
	 */
	//	@Fix(DialogScriptValidator.UPPER_CASE_SWTICH_DEFINITION)
	//	def upperCaseSwitchDefinition(Issue issue, IssueResolutionAcceptor acceptor) {
	//		acceptor.accept(issue, 'Change to lower case name', 'Change to lower case name', null) [
	//			context |
	//			val xtextDocument = context.xtextDocument
	//			val firstLetter = xtextDocument.get(issue.offset, 1)
	//			xtextDocument.replace(issue.offset, 1, firstLetter.toLowerCase)
	//		]
	//	}
	//	
	//	@Fix(DialogScriptValidator.LOWER_CASE_CONDITION_DEFINITION)
	//	def lowerCaseConditionDefinition(Issue issue, IssueResolutionAcceptor acceptor) {
	//		acceptor.accept(issue, 'Capitalize condition name', 'Capitalize condition name', null) [
	//			context |
	//			val xtextDocument = context.xtextDocument
	//			val firstLetter = xtextDocument.get(issue.offset, 1)
	//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
	//		]
	//	}
	@Fix(DialogScriptValidator.WRONG_CONDTIONAL_USAGE)
	def makeConditionSingle(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Add \'single\' modifier', 'Add \'single\' modifier', null) [ element, context |
			val index = Integer.parseInt(issue.data.get(0))
			val hub = element as Hub
			val conditional = hub.choiceDialogs.get(index) as Conditional
			conditional.modifiers.add(Modifier.SINGLE)
		]
	}

	@Fix(DialogScriptValidator.WRONG_CONDTIONAL_USAGE)
	def addExitHubStatement(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Add \'exit hub\' statement', 'Add \'exit hub\' statement', null) [ element, context |
			val index = Integer.parseInt(issue.data.get(0))
			val hub = element as Hub
			val conditional = hub.choiceDialogs.get(index) as Conditional
			if (conditional.body == null)
				conditional.body = DialogScriptFactory.eINSTANCE.createConditionalBody
			val exit = DialogScriptFactory.eINSTANCE.createExit
			exit.setExitHub(true)
			conditional.body.setJump(exit)
		]
	}

	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def conditionUnknown(Issue issue, IssueResolutionAcceptor acceptor) {
		var linkText = customLinkingDiagnosticMessageProvider.getLinkText(issue,
			DialogScriptPackage.eINSTANCE.conditionDefinition)

		if (linkText != null) {
			acceptor.accept(issue, 'Create condition \'' + linkText + '\'', 'Create condition \'' + linkText + '\'',
				null) [ element, context |
				if (element instanceof ConditionList) {

					val root = EcoreUtil2.getContainerOfType(element, Script)

					val condition = DialogScriptFactory.eINSTANCE.createConditionDefinition
					condition.setName(
						customLinkingDiagnosticMessageProvider.getLinkText(issue,
							DialogScriptPackage.eINSTANCE.conditionDefinition))

					val switchList = DialogScriptFactory.eINSTANCE.createSwitchList

					if (root.switchesDefinition == null) {
						val ^switch = DialogScriptFactory.eINSTANCE.createSwitchDefinition
						^switch.setName('switch1')

						^switch.setValue(SwitchValue.OFF)

						root.switchesDefinition = DialogScriptFactory.eINSTANCE.createSwitchesDefinition
						root.switchesDefinition.switches.add(^switch)

						val switchRef = DialogScriptFactory.eINSTANCE.createSwitch
						switchRef.setSwitch(^switch)
						switchRef.setValue(SwitchValue.OFF)

						switchList.switches.add(switchRef)
					} else {
						val ^switch = root.switchesDefinition.switches.get(0)

						val switchRef = DialogScriptFactory.eINSTANCE.createSwitch
						switchRef.setSwitch(^switch)
						switchRef.setValue(SwitchValue.OFF)

						switchList.switches.add(switchRef)
					}

					condition.setSwitchList(switchList)

					if (root.conditionsDefinition == null) {
						root.conditionsDefinition = DialogScriptFactory.eINSTANCE.createConditionsDefinition
					}
					root.conditionsDefinition.conditions.add(condition)
				}
			]
		}
	}

	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def characterUnknown(Issue issue, IssueResolutionAcceptor acceptor) {
		var linkText = customLinkingDiagnosticMessageProvider.getLinkText(issue,
			DialogScriptPackage.eINSTANCE.characterDefinition)

		if (linkText != null) {
			acceptor.accept(issue, 'Create character \'' + linkText + '\'', 'Create character \'' + linkText + '\'',
				null) [ element, context |
				if (element instanceof DialogLine) {

					val root = EcoreUtil2.getContainerOfType(element, Script)

					val character = DialogScriptFactory.eINSTANCE.createCharacterDefinition
					character.setName(
						customLinkingDiagnosticMessageProvider.getLinkText(issue,
							DialogScriptPackage.eINSTANCE.characterDefinition))

					if (root.charactersDefinition == null) {
						root.charactersDefinition = DialogScriptFactory.eINSTANCE.createCharactersDefintion
					}

					root.charactersDefinition.characters.add(character)

				}
			]
		}
	}

	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def switchUnknown(Issue issue, IssueResolutionAcceptor acceptor) {

		var linkText = customLinkingDiagnosticMessageProvider.getLinkText(issue,
			DialogScriptPackage.eINSTANCE.switchDefinition)

		if (linkText != null) {
			acceptor.accept(issue, 'Create switch \'' + linkText + '\'', 'Create switch \'' + linkText + '\'', null) [ element, context |
				if (element instanceof SwitchOff || element instanceof SwitchOn || element instanceof Switch) {

					val root = EcoreUtil2.getContainerOfType(element, Script)

					val ^switch = DialogScriptFactory.eINSTANCE.createSwitchDefinition
					^switch.setName(
						customLinkingDiagnosticMessageProvider.getLinkText(issue,
							DialogScriptPackage.eINSTANCE.switchDefinition))

					^switch.setValue(SwitchValue.OFF)

					if (root.switchesDefinition == null) {
						root.switchesDefinition = DialogScriptFactory.eINSTANCE.createSwitchesDefinition
					}

					root.switchesDefinition.switches.add(^switch)

				}
			]
		}

	}
}
