/*
 * generated by Xtext
 */
package de.unidue.ecg.characterScript.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import de.unidue.ecg.characterScript.services.CharacterScriptGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.AbstractElement

// import com.google.inject.Inject;
// import de.unidue.ecg.characterScript.services.CharacterScriptGrammarAccess
/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class CharacterScriptFormatter extends AbstractDeclarativeFormatter {

	@Inject extension CharacterScriptGrammarAccess

	override protected void configureFormatting(FormattingConfig c) {
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)

		c.setLinewrap.after(charactersAccess.importsAssignment_0)
		c.setLinewrap.after(charactersAccess.importsImportParserRuleCall_0_0)

		// template block
		c.setDefaultBlockLayout(templateAccess.templateKeyword_0, templateAccess.nameAssignment_1,
			templateAccess.endKeyword_5, templateAccess.endKeyword_5, templateAccess.defaultsAssignment_2,
			templateAccess.customsAssignment_3, templateAccess.customsAssignment_4)

		// customs block
		c.setDefaultBlockLayout(globalsAccess.globalKeyword_0, globalsAccess.attributesKeyword_1,
			globalsAccess.endKeyword_4, globalsAccess.endKeyword_4, globalsAccess.customsAssignment_2,
			globalsAccess.customsAssignment_3)

		// character block
		c.setDefaultBlockLayout(characterAccess.characterKeyword_0, characterAccess.nameAssignment_1,
			characterAccess.endKeyword_4, characterAccess.endKeyword_4, characterAccess.propertiesAssignment_3)

	}

	def void setDefaultBlockLayout(FormattingConfig c, Keyword start, AbstractElement indentStart,
		AbstractElement indentEnd, Keyword end, AbstractElement... content) {
		c.setLinewrap(2).before(start)
		c.setIndentation(indentStart, indentEnd)
		content.forEach[
			c.setLinewrap.before(it)
		]
		c.setLinewrap.before(end)
	}
}
