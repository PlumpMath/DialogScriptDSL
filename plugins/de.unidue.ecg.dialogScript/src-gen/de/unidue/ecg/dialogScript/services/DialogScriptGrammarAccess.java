/*
* generated by Xtext
*/
package de.unidue.ecg.dialogScript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DialogScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCharactersDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharactersDefinitionCharactersDefintionParserRuleCall_1_0 = (RuleCall)cCharactersDefinitionAssignment_1.eContents().get(0);
		private final Assignment cSwitchesDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchesDefinitionSwitchesDefinitionParserRuleCall_2_0 = (RuleCall)cSwitchesDefinitionAssignment_2.eContents().get(0);
		private final Assignment cConditionsDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsDefinitionConditionsDefinitionParserRuleCall_3_0 = (RuleCall)cConditionsDefinitionAssignment_3.eContents().get(0);
		private final Assignment cScenesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScenesSceneParserRuleCall_4_0 = (RuleCall)cScenesAssignment_4.eContents().get(0);
		
		//Script:
		//
		//	{Script} charactersDefinition=CharactersDefintion? switchesDefinition=SwitchesDefinition?
		//
		//	conditionsDefinition=ConditionsDefinition? scenes+=Scene*;
		public ParserRule getRule() { return rule; }

		//{Script} charactersDefinition=CharactersDefintion? switchesDefinition=SwitchesDefinition?
		//
		//conditionsDefinition=ConditionsDefinition? scenes+=Scene*
		public Group getGroup() { return cGroup; }

		//{Script}
		public Action getScriptAction_0() { return cScriptAction_0; }

		//charactersDefinition=CharactersDefintion?
		public Assignment getCharactersDefinitionAssignment_1() { return cCharactersDefinitionAssignment_1; }

		//CharactersDefintion
		public RuleCall getCharactersDefinitionCharactersDefintionParserRuleCall_1_0() { return cCharactersDefinitionCharactersDefintionParserRuleCall_1_0; }

		//switchesDefinition=SwitchesDefinition?
		public Assignment getSwitchesDefinitionAssignment_2() { return cSwitchesDefinitionAssignment_2; }

		//SwitchesDefinition
		public RuleCall getSwitchesDefinitionSwitchesDefinitionParserRuleCall_2_0() { return cSwitchesDefinitionSwitchesDefinitionParserRuleCall_2_0; }

		//conditionsDefinition=ConditionsDefinition?
		public Assignment getConditionsDefinitionAssignment_3() { return cConditionsDefinitionAssignment_3; }

		//ConditionsDefinition
		public RuleCall getConditionsDefinitionConditionsDefinitionParserRuleCall_3_0() { return cConditionsDefinitionConditionsDefinitionParserRuleCall_3_0; }

		//scenes+=Scene*
		public Assignment getScenesAssignment_4() { return cScenesAssignment_4; }

		//Scene
		public RuleCall getScenesSceneParserRuleCall_4_0() { return cScenesSceneParserRuleCall_4_0; }
	}

	public class CharactersDefintionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharactersDefintion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharactersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCharactersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCharactersCharacterDefinitionParserRuleCall_2_0 = (RuleCall)cCharactersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCharactersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCharactersCharacterDefinitionParserRuleCall_3_1_0 = (RuleCall)cCharactersAssignment_3_1.eContents().get(0);
		
		//CharactersDefintion:
		//
		//	"characters" ":" characters+=CharacterDefinition ("," characters+=CharacterDefinition)*;
		public ParserRule getRule() { return rule; }

		//"characters" ":" characters+=CharacterDefinition ("," characters+=CharacterDefinition)*
		public Group getGroup() { return cGroup; }

		//"characters"
		public Keyword getCharactersKeyword_0() { return cCharactersKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//characters+=CharacterDefinition
		public Assignment getCharactersAssignment_2() { return cCharactersAssignment_2; }

		//CharacterDefinition
		public RuleCall getCharactersCharacterDefinitionParserRuleCall_2_0() { return cCharactersCharacterDefinitionParserRuleCall_2_0; }

		//("," characters+=CharacterDefinition)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//characters+=CharacterDefinition
		public Assignment getCharactersAssignment_3_1() { return cCharactersAssignment_3_1; }

		//CharacterDefinition
		public RuleCall getCharactersCharacterDefinitionParserRuleCall_3_1_0() { return cCharactersCharacterDefinitionParserRuleCall_3_1_0; }
	}

	public class CharacterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterDefinition");
		private final Assignment cImportedNamespaceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cImportedNamespaceIDTerminalRuleCall_0 = (RuleCall)cImportedNamespaceAssignment.eContents().get(0);
		
		//CharacterDefinition:
		//
		//	importedNamespace=ID;
		public ParserRule getRule() { return rule; }

		//importedNamespace=ID
		public Assignment getImportedNamespaceAssignment() { return cImportedNamespaceAssignment; }

		//ID
		public RuleCall getImportedNamespaceIDTerminalRuleCall_0() { return cImportedNamespaceIDTerminalRuleCall_0; }
	}

	public class SwitchesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchesDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchesSwitchDefinitionParserRuleCall_2_0 = (RuleCall)cSwitchesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSwitchesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSwitchesSwitchDefinitionParserRuleCall_3_1_0 = (RuleCall)cSwitchesAssignment_3_1.eContents().get(0);
		
		//SwitchesDefinition:
		//
		//	"switches" ":" switches+=SwitchDefinition ("," switches+=SwitchDefinition)*;
		public ParserRule getRule() { return rule; }

		//"switches" ":" switches+=SwitchDefinition ("," switches+=SwitchDefinition)*
		public Group getGroup() { return cGroup; }

		//"switches"
		public Keyword getSwitchesKeyword_0() { return cSwitchesKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//switches+=SwitchDefinition
		public Assignment getSwitchesAssignment_2() { return cSwitchesAssignment_2; }

		//SwitchDefinition
		public RuleCall getSwitchesSwitchDefinitionParserRuleCall_2_0() { return cSwitchesSwitchDefinitionParserRuleCall_2_0; }

		//("," switches+=SwitchDefinition)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//switches+=SwitchDefinition
		public Assignment getSwitchesAssignment_3_1() { return cSwitchesAssignment_3_1; }

		//SwitchDefinition
		public RuleCall getSwitchesSwitchDefinitionParserRuleCall_3_1_0() { return cSwitchesSwitchDefinitionParserRuleCall_3_1_0; }
	}

	public class SwitchDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSwitchValueEnumRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//SwitchDefinition:
		//
		//	name=ID ("is" value=SwitchValue)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("is" value=SwitchValue)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("is" value=SwitchValue)?
		public Group getGroup_1() { return cGroup_1; }

		//"is"
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }

		//value=SwitchValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//SwitchValue
		public RuleCall getValueSwitchValueEnumRuleCall_1_1_0() { return cValueSwitchValueEnumRuleCall_1_1_0; }
	}

	public class ConditionsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionsDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionsConditionDefinitionParserRuleCall_1_0 = (RuleCall)cConditionsAssignment_1.eContents().get(0);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionDefinitionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConditionsDefinition:
		//
		//	"conditions" conditions+=ConditionDefinition conditions+=ConditionDefinition* "end";
		public ParserRule getRule() { return rule; }

		//"conditions" conditions+=ConditionDefinition conditions+=ConditionDefinition* "end"
		public Group getGroup() { return cGroup; }

		//"conditions"
		public Keyword getConditionsKeyword_0() { return cConditionsKeyword_0; }

		//conditions+=ConditionDefinition
		public Assignment getConditionsAssignment_1() { return cConditionsAssignment_1; }

		//ConditionDefinition
		public RuleCall getConditionsConditionDefinitionParserRuleCall_1_0() { return cConditionsConditionDefinitionParserRuleCall_1_0; }

		//conditions+=ConditionDefinition*
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }

		//ConditionDefinition
		public RuleCall getConditionsConditionDefinitionParserRuleCall_2_0() { return cConditionsConditionDefinitionParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class ConditionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitchListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchListSwitchListParserRuleCall_2_0 = (RuleCall)cSwitchListAssignment_2.eContents().get(0);
		
		//ConditionDefinition:
		//
		//	name=ID "when" switchList=SwitchList;
		public ParserRule getRule() { return rule; }

		//name=ID "when" switchList=SwitchList
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//switchList=SwitchList
		public Assignment getSwitchListAssignment_2() { return cSwitchListAssignment_2; }

		//SwitchList
		public RuleCall getSwitchListSwitchListParserRuleCall_2_0() { return cSwitchListSwitchListParserRuleCall_2_0; }
	}

	public class SceneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scene");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSceneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSceneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDialogAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDialogDialogParserRuleCall_3_0 = (RuleCall)cDialogAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSceneKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Scene:
		//
		//	{Scene} "scene" name=StringID dialog=Dialog "end" "scene";
		public ParserRule getRule() { return rule; }

		//{Scene} "scene" name=StringID dialog=Dialog "end" "scene"
		public Group getGroup() { return cGroup; }

		//{Scene}
		public Action getSceneAction_0() { return cSceneAction_0; }

		//"scene"
		public Keyword getSceneKeyword_1() { return cSceneKeyword_1; }

		//name=StringID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//StringID
		public RuleCall getNameStringIDParserRuleCall_2_0() { return cNameStringIDParserRuleCall_2_0; }

		//dialog=Dialog
		public Assignment getDialogAssignment_3() { return cDialogAssignment_3; }

		//Dialog
		public RuleCall getDialogDialogParserRuleCall_3_0() { return cDialogDialogParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"scene"
		public Keyword getSceneKeyword_5() { return cSceneKeyword_5; }
	}

	public class DialogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dialog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDialogAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefaultsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefaultsDefaultsParserRuleCall_1_0 = (RuleCall)cDefaultsAssignment_1.eContents().get(0);
		private final Assignment cFirstTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstTimeFirstTimeParserRuleCall_2_0 = (RuleCall)cFirstTimeAssignment_2.eContents().get(0);
		private final Assignment cRecursivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRecursivesRecursiveParserRuleCall_3_0 = (RuleCall)cRecursivesAssignment_3.eContents().get(0);
		private final Assignment cPartingLinesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPartingLinesPartingLinesParserRuleCall_4_0 = (RuleCall)cPartingLinesAssignment_4.eContents().get(0);
		
		//Dialog:
		//
		//	{Dialog} defaults=Defaults? firstTime=FirstTime? recursives+=Recursive* partingLines=PartingLines?;
		public ParserRule getRule() { return rule; }

		//{Dialog} defaults=Defaults? firstTime=FirstTime? recursives+=Recursive* partingLines=PartingLines?
		public Group getGroup() { return cGroup; }

		//{Dialog}
		public Action getDialogAction_0() { return cDialogAction_0; }

		//defaults=Defaults?
		public Assignment getDefaultsAssignment_1() { return cDefaultsAssignment_1; }

		//Defaults
		public RuleCall getDefaultsDefaultsParserRuleCall_1_0() { return cDefaultsDefaultsParserRuleCall_1_0; }

		//firstTime=FirstTime?
		public Assignment getFirstTimeAssignment_2() { return cFirstTimeAssignment_2; }

		//FirstTime
		public RuleCall getFirstTimeFirstTimeParserRuleCall_2_0() { return cFirstTimeFirstTimeParserRuleCall_2_0; }

		//recursives+=Recursive*
		public Assignment getRecursivesAssignment_3() { return cRecursivesAssignment_3; }

		//Recursive
		public RuleCall getRecursivesRecursiveParserRuleCall_3_0() { return cRecursivesRecursiveParserRuleCall_3_0; }

		//partingLines=PartingLines?
		public Assignment getPartingLinesAssignment_4() { return cPartingLinesAssignment_4; }

		//PartingLines
		public RuleCall getPartingLinesPartingLinesParserRuleCall_4_0() { return cPartingLinesPartingLinesParserRuleCall_4_0; }
	}

	public class RecursiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recursive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDialogLineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Recursive:
		//
		//	Conditional | Hub | DialogLine;
		public ParserRule getRule() { return rule; }

		//Conditional | Hub | DialogLine
		public Alternatives getAlternatives() { return cAlternatives; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0() { return cConditionalParserRuleCall_0; }

		//Hub
		public RuleCall getHubParserRuleCall_1() { return cHubParserRuleCall_1; }

		//DialogLine
		public RuleCall getDialogLineParserRuleCall_2() { return cDialogLineParserRuleCall_2; }
	}

	public class DefaultsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Defaults");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConditionalBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Defaults:
		//
		//	{Defaults} "defaults" comment=COMMENT? body=ConditionalBody "end";
		public ParserRule getRule() { return rule; }

		//{Defaults} "defaults" comment=COMMENT? body=ConditionalBody "end"
		public Group getGroup() { return cGroup; }

		//{Defaults}
		public Action getDefaultsAction_0() { return cDefaultsAction_0; }

		//"defaults"
		public Keyword getDefaultsKeyword_1() { return cDefaultsKeyword_1; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_3_0() { return cBodyConditionalBodyParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class FirstTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFirstTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFirstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTimeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyConditionalBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Assignment cOtherTimesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOtherTimesOtherTimesParserRuleCall_5_0 = (RuleCall)cOtherTimesAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FirstTime:
		//
		//	{FirstTime} "first" "time" comment=COMMENT? body=ConditionalBody otherTimes=OtherTimes? "end";
		public ParserRule getRule() { return rule; }

		//{FirstTime} "first" "time" comment=COMMENT? body=ConditionalBody otherTimes=OtherTimes? "end"
		public Group getGroup() { return cGroup; }

		//{FirstTime}
		public Action getFirstTimeAction_0() { return cFirstTimeAction_0; }

		//"first"
		public Keyword getFirstKeyword_1() { return cFirstKeyword_1; }

		//"time"
		public Keyword getTimeKeyword_2() { return cTimeKeyword_2; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_3_0() { return cCommentCOMMENTTerminalRuleCall_3_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_4_0() { return cBodyConditionalBodyParserRuleCall_4_0; }

		//otherTimes=OtherTimes?
		public Assignment getOtherTimesAssignment_5() { return cOtherTimesAssignment_5; }

		//OtherTimes
		public RuleCall getOtherTimesOtherTimesParserRuleCall_5_0() { return cOtherTimesOtherTimesParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class OtherTimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherTimes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOtherTimesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConditionalBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//OtherTimes:
		//
		//	{OtherTimes} "else" comment=COMMENT? body=ConditionalBody;
		public ParserRule getRule() { return rule; }

		//{OtherTimes} "else" comment=COMMENT? body=ConditionalBody
		public Group getGroup() { return cGroup; }

		//{OtherTimes}
		public Action getOtherTimesAction_0() { return cOtherTimesAction_0; }

		//"else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_3_0() { return cBodyConditionalBodyParserRuleCall_3_0; }
	}

	public class PartingLinesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartingLines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPartingLinesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPartingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConditionalBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PartingLines:
		//
		//	{PartingLines} "parting" comment=COMMENT? body=ConditionalBody "end";
		public ParserRule getRule() { return rule; }

		//{PartingLines} "parting" comment=COMMENT? body=ConditionalBody "end"
		public Group getGroup() { return cGroup; }

		//{PartingLines}
		public Action getPartingLinesAction_0() { return cPartingLinesAction_0; }

		//"parting"
		public Keyword getPartingKeyword_1() { return cPartingKeyword_1; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_3_0() { return cBodyConditionalBodyParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class HubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsHiddenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsHiddenHiddenKeyword_0_0 = (Keyword)cIsHiddenAssignment_0.eContents().get(0);
		private final Keyword cHubKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cHubCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHubCommentCOMMENTTerminalRuleCall_3_0 = (RuleCall)cHubCommentAssignment_3.eContents().get(0);
		private final Assignment cChoiceDialogsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChoiceDialogsAbstractChoiceDialogParserRuleCall_4_0 = (RuleCall)cChoiceDialogsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Hub:
		//
		//	isHidden?="hidden"? "hub" name=StringID hubComment=COMMENT? choiceDialogs+=AbstractChoiceDialog* "end";
		public ParserRule getRule() { return rule; }

		//isHidden?="hidden"? "hub" name=StringID hubComment=COMMENT? choiceDialogs+=AbstractChoiceDialog* "end"
		public Group getGroup() { return cGroup; }

		//isHidden?="hidden"?
		public Assignment getIsHiddenAssignment_0() { return cIsHiddenAssignment_0; }

		//"hidden"
		public Keyword getIsHiddenHiddenKeyword_0_0() { return cIsHiddenHiddenKeyword_0_0; }

		//"hub"
		public Keyword getHubKeyword_1() { return cHubKeyword_1; }

		//name=StringID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//StringID
		public RuleCall getNameStringIDParserRuleCall_2_0() { return cNameStringIDParserRuleCall_2_0; }

		//hubComment=COMMENT?
		public Assignment getHubCommentAssignment_3() { return cHubCommentAssignment_3; }

		//COMMENT
		public RuleCall getHubCommentCOMMENTTerminalRuleCall_3_0() { return cHubCommentCOMMENTTerminalRuleCall_3_0; }

		//choiceDialogs+=AbstractChoiceDialog*
		public Assignment getChoiceDialogsAssignment_4() { return cChoiceDialogsAssignment_4; }

		//AbstractChoiceDialog
		public RuleCall getChoiceDialogsAbstractChoiceDialogParserRuleCall_4_0() { return cChoiceDialogsAbstractChoiceDialogParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AbstractChoiceDialogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractChoiceDialog");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChoiceDialogParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalChoiceDialogParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractChoiceDialog:
		//
		//	ChoiceDialog | ConditionalChoiceDialog | Conditional;
		public ParserRule getRule() { return rule; }

		//ChoiceDialog | ConditionalChoiceDialog | Conditional
		public Alternatives getAlternatives() { return cAlternatives; }

		//ChoiceDialog
		public RuleCall getChoiceDialogParserRuleCall_0() { return cChoiceDialogParserRuleCall_0; }

		//ConditionalChoiceDialog
		public RuleCall getConditionalChoiceDialogParserRuleCall_1() { return cConditionalChoiceDialogParserRuleCall_1; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_2() { return cConditionalParserRuleCall_2; }
	}

	public class ConditionalChoiceDialogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalChoiceDialog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierEnumRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cChoicesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionListConditionListParserRuleCall_4_0 = (RuleCall)cConditionListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCommentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_6_0 = (RuleCall)cCommentAssignment_6.eContents().get(0);
		private final Assignment cChoiceDialogsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoiceDialogsChoiceDialogParserRuleCall_7_0 = (RuleCall)cChoiceDialogsAssignment_7.eContents().get(0);
		private final Assignment cOtherwiseChoicesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOtherwiseChoicesOtherwiseChoiceParserRuleCall_8_0 = (RuleCall)cOtherwiseChoicesAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ConditionalChoiceDialog:
		//
		//	modifiers+=Modifier* "choices" "if" "(" conditionList=ConditionList ")" comment=COMMENT? choiceDialogs+=ChoiceDialog+
		//
		//	otherwiseChoices+=OtherwiseChoice* "end";
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "choices" "if" "(" conditionList=ConditionList ")" comment=COMMENT? choiceDialogs+=ChoiceDialog+
		//
		//otherwiseChoices+=OtherwiseChoice* "end"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_0_0() { return cModifiersModifierEnumRuleCall_0_0; }

		//"choices"
		public Keyword getChoicesKeyword_1() { return cChoicesKeyword_1; }

		//"if"
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//conditionList=ConditionList
		public Assignment getConditionListAssignment_4() { return cConditionListAssignment_4; }

		//ConditionList
		public RuleCall getConditionListConditionListParserRuleCall_4_0() { return cConditionListConditionListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_6() { return cCommentAssignment_6; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_6_0() { return cCommentCOMMENTTerminalRuleCall_6_0; }

		//choiceDialogs+=ChoiceDialog+
		public Assignment getChoiceDialogsAssignment_7() { return cChoiceDialogsAssignment_7; }

		//ChoiceDialog
		public RuleCall getChoiceDialogsChoiceDialogParserRuleCall_7_0() { return cChoiceDialogsChoiceDialogParserRuleCall_7_0; }

		//otherwiseChoices+=OtherwiseChoice*
		public Assignment getOtherwiseChoicesAssignment_8() { return cOtherwiseChoicesAssignment_8; }

		//OtherwiseChoice
		public RuleCall getOtherwiseChoicesOtherwiseChoiceParserRuleCall_8_0() { return cOtherwiseChoicesOtherwiseChoiceParserRuleCall_8_0; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class OtherwiseChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherwiseChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierEnumRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cChoicesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConditionListAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConditionListConditionListParserRuleCall_3_2_0 = (RuleCall)cConditionListAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		private final Assignment cChoicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChoicesChoiceDialogParserRuleCall_5_0 = (RuleCall)cChoicesAssignment_5.eContents().get(0);
		
		//OtherwiseChoice:
		//
		//	modifiers+=Modifier* "choices" "else" ("if" "(" conditionList=ConditionList ")")? comment=COMMENT?
		//
		//	choices+=ChoiceDialog+;
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "choices" "else" ("if" "(" conditionList=ConditionList ")")? comment=COMMENT?
		//
		//choices+=ChoiceDialog+
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_0_0() { return cModifiersModifierEnumRuleCall_0_0; }

		//"choices"
		public Keyword getChoicesKeyword_1() { return cChoicesKeyword_1; }

		//"else"
		public Keyword getElseKeyword_2() { return cElseKeyword_2; }

		//(=> "if" "(" conditionList=ConditionList ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//conditionList=ConditionList
		public Assignment getConditionListAssignment_3_2() { return cConditionListAssignment_3_2; }

		//ConditionList
		public RuleCall getConditionListConditionListParserRuleCall_3_2_0() { return cConditionListConditionListParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_4_0() { return cCommentCOMMENTTerminalRuleCall_4_0; }

		//choices+=ChoiceDialog+
		public Assignment getChoicesAssignment_5() { return cChoicesAssignment_5; }

		//ChoiceDialog
		public RuleCall getChoicesChoiceDialogParserRuleCall_5_0() { return cChoicesChoiceDialogParserRuleCall_5_0; }
	}

	public class StringIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringID");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringID:
		//
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class ChoiceDialogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceDialog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoiceDialogAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierEnumRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Keyword cChoiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameStringIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cChoiceCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChoiceCommentCOMMENTTerminalRuleCall_4_0 = (RuleCall)cChoiceCommentAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyConditionalBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChoiceDialog:
		//
		//	{ChoiceDialog} modifiers+=Modifier* "choice" name=StringID choiceComment=COMMENT? body=ConditionalBody "end";
		public ParserRule getRule() { return rule; }

		//{ChoiceDialog} modifiers+=Modifier* "choice" name=StringID choiceComment=COMMENT? body=ConditionalBody "end"
		public Group getGroup() { return cGroup; }

		//{ChoiceDialog}
		public Action getChoiceDialogAction_0() { return cChoiceDialogAction_0; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }

		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_1_0() { return cModifiersModifierEnumRuleCall_1_0; }

		//"choice"
		public Keyword getChoiceKeyword_2() { return cChoiceKeyword_2; }

		//name=StringID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//StringID
		public RuleCall getNameStringIDParserRuleCall_3_0() { return cNameStringIDParserRuleCall_3_0; }

		//choiceComment=COMMENT?
		public Assignment getChoiceCommentAssignment_4() { return cChoiceCommentAssignment_4; }

		//COMMENT
		public RuleCall getChoiceCommentCOMMENTTerminalRuleCall_4_0() { return cChoiceCommentCOMMENTTerminalRuleCall_4_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_5_0() { return cBodyConditionalBodyParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class ConditionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConditionsConditionDefinitionCrossReference_0_0 = (CrossReference)cConditionsAssignment_0.eContents().get(0);
		private final RuleCall cConditionsConditionDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cConditionsConditionDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cConditionsConditionDefinitionCrossReference_1_1_0 = (CrossReference)cConditionsAssignment_1_1.eContents().get(0);
		private final RuleCall cConditionsConditionDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cConditionsConditionDefinitionCrossReference_1_1_0.eContents().get(1);
		
		//ConditionList:
		//
		//	conditions+=[ConditionDefinition] ("or" conditions+=[ConditionDefinition])*;
		public ParserRule getRule() { return rule; }

		//conditions+=[ConditionDefinition] ("or" conditions+=[ConditionDefinition])*
		public Group getGroup() { return cGroup; }

		//conditions+=[ConditionDefinition]
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }

		//[ConditionDefinition]
		public CrossReference getConditionsConditionDefinitionCrossReference_0_0() { return cConditionsConditionDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getConditionsConditionDefinitionIDTerminalRuleCall_0_0_1() { return cConditionsConditionDefinitionIDTerminalRuleCall_0_0_1; }

		//("or" conditions+=[ConditionDefinition])*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//conditions+=[ConditionDefinition]
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }

		//[ConditionDefinition]
		public CrossReference getConditionsConditionDefinitionCrossReference_1_1_0() { return cConditionsConditionDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getConditionsConditionDefinitionIDTerminalRuleCall_1_1_0_1() { return cConditionsConditionDefinitionIDTerminalRuleCall_1_1_0_1; }
	}

	public class JumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Jump");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvokeHubParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvokeSceneParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Jump:
		//
		//	Exit | InvokeHub | InvokeScene;
		public ParserRule getRule() { return rule; }

		//Exit | InvokeHub | InvokeScene
		public Alternatives getAlternatives() { return cAlternatives; }

		//Exit
		public RuleCall getExitParserRuleCall_0() { return cExitParserRuleCall_0; }

		//InvokeHub
		public RuleCall getInvokeHubParserRuleCall_1() { return cInvokeHubParserRuleCall_1; }

		//InvokeScene
		public RuleCall getInvokeSceneParserRuleCall_2() { return cInvokeSceneParserRuleCall_2; }
	}

	public class InvokeHubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeHub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHubKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHubAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cHubHubCrossReference_2_0 = (CrossReference)cHubAssignment_2.eContents().get(0);
		private final RuleCall cHubHubStringIDParserRuleCall_2_0_1 = (RuleCall)cHubHubCrossReference_2_0.eContents().get(1);
		
		//InvokeHub:
		//
		//	"enter" "hub" hub=[Hub|StringID];
		public ParserRule getRule() { return rule; }

		//"enter" "hub" hub=[Hub|StringID]
		public Group getGroup() { return cGroup; }

		//"enter"
		public Keyword getEnterKeyword_0() { return cEnterKeyword_0; }

		//"hub"
		public Keyword getHubKeyword_1() { return cHubKeyword_1; }

		//hub=[Hub|StringID]
		public Assignment getHubAssignment_2() { return cHubAssignment_2; }

		//[Hub|StringID]
		public CrossReference getHubHubCrossReference_2_0() { return cHubHubCrossReference_2_0; }

		//StringID
		public RuleCall getHubHubStringIDParserRuleCall_2_0_1() { return cHubHubStringIDParserRuleCall_2_0_1; }
	}

	public class InvokeSceneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeScene");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSceneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSceneAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSceneSceneCrossReference_2_0 = (CrossReference)cSceneAssignment_2.eContents().get(0);
		private final RuleCall cSceneSceneStringIDParserRuleCall_2_0_1 = (RuleCall)cSceneSceneCrossReference_2_0.eContents().get(1);
		
		//InvokeScene:
		//
		//	"enter" "scene" scene=[Scene|StringID];
		public ParserRule getRule() { return rule; }

		//"enter" "scene" scene=[Scene|StringID]
		public Group getGroup() { return cGroup; }

		//"enter"
		public Keyword getEnterKeyword_0() { return cEnterKeyword_0; }

		//"scene"
		public Keyword getSceneKeyword_1() { return cSceneKeyword_1; }

		//scene=[Scene|StringID]
		public Assignment getSceneAssignment_2() { return cSceneAssignment_2; }

		//[Scene|StringID]
		public CrossReference getSceneSceneCrossReference_2_0() { return cSceneSceneCrossReference_2_0; }

		//StringID
		public RuleCall getSceneSceneStringIDParserRuleCall_2_0_1() { return cSceneSceneStringIDParserRuleCall_2_0_1; }
	}

	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExitHubAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cExitHubHubKeyword_2_0_0 = (Keyword)cExitHubAssignment_2_0.eContents().get(0);
		private final Assignment cExitSceneAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cExitSceneSceneKeyword_2_1_0 = (Keyword)cExitSceneAssignment_2_1.eContents().get(0);
		
		//Exit:
		//
		//	{Exit} "exit" (exitHub?="hub" | exitScene?="scene");
		public ParserRule getRule() { return rule; }

		//{Exit} "exit" (exitHub?="hub" | exitScene?="scene")
		public Group getGroup() { return cGroup; }

		//{Exit}
		public Action getExitAction_0() { return cExitAction_0; }

		//"exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }

		//exitHub?="hub" | exitScene?="scene"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//exitHub?="hub"
		public Assignment getExitHubAssignment_2_0() { return cExitHubAssignment_2_0; }

		//"hub"
		public Keyword getExitHubHubKeyword_2_0_0() { return cExitHubHubKeyword_2_0_0; }

		//exitScene?="scene"
		public Assignment getExitSceneAssignment_2_1() { return cExitSceneAssignment_2_1; }

		//"scene"
		public Keyword getExitSceneSceneKeyword_2_1_0() { return cExitSceneSceneKeyword_2_1_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierEnumRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionListConditionListParserRuleCall_3_0 = (RuleCall)cConditionListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_5_0 = (RuleCall)cCommentAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyConditionalBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Assignment cOtherwiseListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOtherwiseListOtherwiseParserRuleCall_7_0 = (RuleCall)cOtherwiseListAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Conditional:
		//
		//	modifiers+=Modifier* "if" "(" conditionList=ConditionList ")" comment=COMMENT? body=ConditionalBody
		//
		//	otherwiseList+=Otherwise* "end";
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "if" "(" conditionList=ConditionList ")" comment=COMMENT? body=ConditionalBody
		//
		//otherwiseList+=Otherwise* "end"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_0_0() { return cModifiersModifierEnumRuleCall_0_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//conditionList=ConditionList
		public Assignment getConditionListAssignment_3() { return cConditionListAssignment_3; }

		//ConditionList
		public RuleCall getConditionListConditionListParserRuleCall_3_0() { return cConditionListConditionListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_5() { return cCommentAssignment_5; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_5_0() { return cCommentCOMMENTTerminalRuleCall_5_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_6_0() { return cBodyConditionalBodyParserRuleCall_6_0; }

		//otherwiseList+=Otherwise*
		public Assignment getOtherwiseListAssignment_7() { return cOtherwiseListAssignment_7; }

		//Otherwise
		public RuleCall getOtherwiseListOtherwiseParserRuleCall_7_0() { return cOtherwiseListOtherwiseParserRuleCall_7_0; }

		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}

	public class SwitchListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSwitchesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSwitchesSwitchParserRuleCall_0_0 = (RuleCall)cSwitchesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSwitchesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSwitchesSwitchParserRuleCall_1_1_0 = (RuleCall)cSwitchesAssignment_1_1.eContents().get(0);
		
		//SwitchList:
		//
		//	switches+=Switch ("and" switches+=Switch)*;
		public ParserRule getRule() { return rule; }

		//switches+=Switch ("and" switches+=Switch)*
		public Group getGroup() { return cGroup; }

		//switches+=Switch
		public Assignment getSwitchesAssignment_0() { return cSwitchesAssignment_0; }

		//Switch
		public RuleCall getSwitchesSwitchParserRuleCall_0_0() { return cSwitchesSwitchParserRuleCall_0_0; }

		//("and" switches+=Switch)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//switches+=Switch
		public Assignment getSwitchesAssignment_1_1() { return cSwitchesAssignment_1_1; }

		//Switch
		public RuleCall getSwitchesSwitchParserRuleCall_1_1_0() { return cSwitchesSwitchParserRuleCall_1_1_0; }
	}

	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSwitchAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSwitchSwitchDefinitionCrossReference_0_0 = (CrossReference)cSwitchAssignment_0.eContents().get(0);
		private final RuleCall cSwitchSwitchDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cSwitchSwitchDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSwitchValueEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Switch:
		//
		//	switch=[SwitchDefinition] "is" value=SwitchValue;
		public ParserRule getRule() { return rule; }

		//switch=[SwitchDefinition] "is" value=SwitchValue
		public Group getGroup() { return cGroup; }

		//switch=[SwitchDefinition]
		public Assignment getSwitchAssignment_0() { return cSwitchAssignment_0; }

		//[SwitchDefinition]
		public CrossReference getSwitchSwitchDefinitionCrossReference_0_0() { return cSwitchSwitchDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getSwitchSwitchDefinitionIDTerminalRuleCall_0_0_1() { return cSwitchSwitchDefinitionIDTerminalRuleCall_0_0_1; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//value=SwitchValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SwitchValue
		public RuleCall getValueSwitchValueEnumRuleCall_2_0() { return cValueSwitchValueEnumRuleCall_2_0; }
	}

	public class ConditionalBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Assignment cSwitchOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitchOnSwitchOnParserRuleCall_2_0 = (RuleCall)cSwitchOnAssignment_2.eContents().get(0);
		private final Assignment cSwitchOffAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSwitchOffSwitchOffParserRuleCall_3_0 = (RuleCall)cSwitchOffAssignment_3.eContents().get(0);
		private final Assignment cJumpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJumpJumpParserRuleCall_4_0 = (RuleCall)cJumpAssignment_4.eContents().get(0);
		
		//ConditionalBody:
		//
		//	{ConditionalBody} statements+=Statement* switchOn=SwitchOn? switchOff=SwitchOff? jump=Jump?;
		public ParserRule getRule() { return rule; }

		//{ConditionalBody} statements+=Statement* switchOn=SwitchOn? switchOff=SwitchOff? jump=Jump?
		public Group getGroup() { return cGroup; }

		//{ConditionalBody}
		public Action getConditionalBodyAction_0() { return cConditionalBodyAction_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//switchOn=SwitchOn?
		public Assignment getSwitchOnAssignment_2() { return cSwitchOnAssignment_2; }

		//SwitchOn
		public RuleCall getSwitchOnSwitchOnParserRuleCall_2_0() { return cSwitchOnSwitchOnParserRuleCall_2_0; }

		//switchOff=SwitchOff?
		public Assignment getSwitchOffAssignment_3() { return cSwitchOffAssignment_3; }

		//SwitchOff
		public RuleCall getSwitchOffSwitchOffParserRuleCall_3_0() { return cSwitchOffSwitchOffParserRuleCall_3_0; }

		//jump=Jump?
		public Assignment getJumpAssignment_4() { return cJumpAssignment_4; }

		//Jump
		public RuleCall getJumpJumpParserRuleCall_4_0() { return cJumpJumpParserRuleCall_4_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDialogLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//
		//	DialogLine | Conditional;
		public ParserRule getRule() { return rule; }

		//DialogLine | Conditional
		public Alternatives getAlternatives() { return cAlternatives; }

		//DialogLine
		public RuleCall getDialogLineParserRuleCall_0() { return cDialogLineParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }
	}

	public class OtherwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Otherwise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierEnumRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionListAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConditionListConditionListParserRuleCall_2_2_0 = (RuleCall)cConditionListAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyConditionalBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Otherwise:
		//
		//	modifiers+=Modifier* "else" ("if" "(" conditionList=ConditionList ")")? comment=COMMENT? body=ConditionalBody;
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "else" ("if" "(" conditionList=ConditionList ")")? comment=COMMENT? body=ConditionalBody
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_0_0() { return cModifiersModifierEnumRuleCall_0_0; }

		//"else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }

		//(=> "if" "(" conditionList=ConditionList ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> "if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//conditionList=ConditionList
		public Assignment getConditionListAssignment_2_2() { return cConditionListAssignment_2_2; }

		//ConditionList
		public RuleCall getConditionListConditionListParserRuleCall_2_2_0() { return cConditionListConditionListParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_3_0() { return cCommentCOMMENTTerminalRuleCall_3_0; }

		//body=ConditionalBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//ConditionalBody
		public RuleCall getBodyConditionalBodyParserRuleCall_4_0() { return cBodyConditionalBodyParserRuleCall_4_0; }
	}

	public class SwitchOffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchOff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOffKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSetsSwitchDefinitionCrossReference_2_0 = (CrossReference)cSetsAssignment_2.eContents().get(0);
		private final RuleCall cSetsSwitchDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cSetsSwitchDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSetsSwitchDefinitionCrossReference_3_1_0 = (CrossReference)cSetsAssignment_3_1.eContents().get(0);
		private final RuleCall cSetsSwitchDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSetsSwitchDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//SwitchOff:
		//
		//	"switch" "off" sets+=[SwitchDefinition] ("," sets+=[SwitchDefinition])* comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"switch" "off" sets+=[SwitchDefinition] ("," sets+=[SwitchDefinition])* comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"off"
		public Keyword getOffKeyword_1() { return cOffKeyword_1; }

		//sets+=[SwitchDefinition]
		public Assignment getSetsAssignment_2() { return cSetsAssignment_2; }

		//[SwitchDefinition]
		public CrossReference getSetsSwitchDefinitionCrossReference_2_0() { return cSetsSwitchDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getSetsSwitchDefinitionIDTerminalRuleCall_2_0_1() { return cSetsSwitchDefinitionIDTerminalRuleCall_2_0_1; }

		//("," sets+=[SwitchDefinition])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//sets+=[SwitchDefinition]
		public Assignment getSetsAssignment_3_1() { return cSetsAssignment_3_1; }

		//[SwitchDefinition]
		public CrossReference getSetsSwitchDefinitionCrossReference_3_1_0() { return cSetsSwitchDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getSetsSwitchDefinitionIDTerminalRuleCall_3_1_0_1() { return cSetsSwitchDefinitionIDTerminalRuleCall_3_1_0_1; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_4_0() { return cCommentCOMMENTTerminalRuleCall_4_0; }
	}

	public class SwitchOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSetsSwitchDefinitionCrossReference_2_0 = (CrossReference)cSetsAssignment_2.eContents().get(0);
		private final RuleCall cSetsSwitchDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cSetsSwitchDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSetsSwitchDefinitionCrossReference_3_1_0 = (CrossReference)cSetsAssignment_3_1.eContents().get(0);
		private final RuleCall cSetsSwitchDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSetsSwitchDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//SwitchOn:
		//
		//	"switch" "on" sets+=[SwitchDefinition] ("," sets+=[SwitchDefinition])* comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"switch" "on" sets+=[SwitchDefinition] ("," sets+=[SwitchDefinition])* comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }

		//sets+=[SwitchDefinition]
		public Assignment getSetsAssignment_2() { return cSetsAssignment_2; }

		//[SwitchDefinition]
		public CrossReference getSetsSwitchDefinitionCrossReference_2_0() { return cSetsSwitchDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getSetsSwitchDefinitionIDTerminalRuleCall_2_0_1() { return cSetsSwitchDefinitionIDTerminalRuleCall_2_0_1; }

		//("," sets+=[SwitchDefinition])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//sets+=[SwitchDefinition]
		public Assignment getSetsAssignment_3_1() { return cSetsAssignment_3_1; }

		//[SwitchDefinition]
		public CrossReference getSetsSwitchDefinitionCrossReference_3_1_0() { return cSetsSwitchDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getSetsSwitchDefinitionIDTerminalRuleCall_3_1_0_1() { return cSetsSwitchDefinitionIDTerminalRuleCall_3_1_0_1; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_4_0() { return cCommentCOMMENTTerminalRuleCall_4_0; }
	}

	public class DialogLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DialogLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCharacterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCharacterCharacterCrossReference_0_0 = (CrossReference)cCharacterAssignment_0.eContents().get(0);
		private final RuleCall cCharacterCharacterIDTerminalRuleCall_0_0_1 = (RuleCall)cCharacterCharacterCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinesStringIDParserRuleCall_2_0 = (RuleCall)cLinesAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//DialogLine:
		//
		//	character=[chara::Character] ":" lines=StringID comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//character=[chara::Character] ":" lines=StringID comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//character=[chara::Character]
		public Assignment getCharacterAssignment_0() { return cCharacterAssignment_0; }

		//[chara::Character]
		public CrossReference getCharacterCharacterCrossReference_0_0() { return cCharacterCharacterCrossReference_0_0; }

		//ID
		public RuleCall getCharacterCharacterIDTerminalRuleCall_0_0_1() { return cCharacterCharacterIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//lines=StringID
		public Assignment getLinesAssignment_2() { return cLinesAssignment_2; }

		//StringID
		public RuleCall getLinesStringIDParserRuleCall_2_0() { return cLinesStringIDParserRuleCall_2_0; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_3_0() { return cCommentCOMMENTTerminalRuleCall_3_0; }
	}
	
	
	public class ModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSingleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSingleSingleKeyword_0_0 = (Keyword)cSingleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRandomEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRandomRandomKeyword_1_0 = (Keyword)cRandomEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Modifier:
		//
		//	single | random;
		public EnumRule getRule() { return rule; }

		//single | random
		public Alternatives getAlternatives() { return cAlternatives; }

		//single
		public EnumLiteralDeclaration getSingleEnumLiteralDeclaration_0() { return cSingleEnumLiteralDeclaration_0; }

		//"single"
		public Keyword getSingleSingleKeyword_0_0() { return cSingleSingleKeyword_0_0; }

		//random
		public EnumLiteralDeclaration getRandomEnumLiteralDeclaration_1() { return cRandomEnumLiteralDeclaration_1; }

		//"random"
		public Keyword getRandomRandomKeyword_1_0() { return cRandomRandomKeyword_1_0; }
	}

	public class SwitchValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOnEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOnOnKeyword_0_0 = (Keyword)cOnEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOffEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOffOffKeyword_1_0 = (Keyword)cOffEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SwitchValue:
		//
		//	on | off;
		public EnumRule getRule() { return rule; }

		//on | off
		public Alternatives getAlternatives() { return cAlternatives; }

		//on
		public EnumLiteralDeclaration getOnEnumLiteralDeclaration_0() { return cOnEnumLiteralDeclaration_0; }

		//"on"
		public Keyword getOnOnKeyword_0_0() { return cOnOnKeyword_0_0; }

		//off
		public EnumLiteralDeclaration getOffEnumLiteralDeclaration_1() { return cOffEnumLiteralDeclaration_1; }

		//"off"
		public Keyword getOffOffKeyword_1_0() { return cOffOffKeyword_1_0; }
	}
	
	private ScriptElements pScript;
	private CharactersDefintionElements pCharactersDefintion;
	private CharacterDefinitionElements pCharacterDefinition;
	private SwitchesDefinitionElements pSwitchesDefinition;
	private SwitchDefinitionElements pSwitchDefinition;
	private ConditionsDefinitionElements pConditionsDefinition;
	private ConditionDefinitionElements pConditionDefinition;
	private SceneElements pScene;
	private DialogElements pDialog;
	private RecursiveElements pRecursive;
	private DefaultsElements pDefaults;
	private FirstTimeElements pFirstTime;
	private OtherTimesElements pOtherTimes;
	private PartingLinesElements pPartingLines;
	private HubElements pHub;
	private AbstractChoiceDialogElements pAbstractChoiceDialog;
	private ConditionalChoiceDialogElements pConditionalChoiceDialog;
	private OtherwiseChoiceElements pOtherwiseChoice;
	private StringIDElements pStringID;
	private ChoiceDialogElements pChoiceDialog;
	private ModifierElements unknownRuleModifier;
	private ConditionListElements pConditionList;
	private JumpElements pJump;
	private InvokeHubElements pInvokeHub;
	private InvokeSceneElements pInvokeScene;
	private ExitElements pExit;
	private ConditionalElements pConditional;
	private SwitchListElements pSwitchList;
	private SwitchElements pSwitch;
	private SwitchValueElements unknownRuleSwitchValue;
	private ConditionalBodyElements pConditionalBody;
	private StatementElements pStatement;
	private OtherwiseElements pOtherwise;
	private SwitchOffElements pSwitchOff;
	private SwitchOnElements pSwitchOn;
	private DialogLineElements pDialogLine;
	private TerminalRule tCOMMENT;
	private TerminalRule tSTRING;
	private TerminalRule tWILDCARD;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DialogScriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.unidue.ecg.dialogScript.DialogScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//
	//	{Script} charactersDefinition=CharactersDefintion? switchesDefinition=SwitchesDefinition?
	//
	//	conditionsDefinition=ConditionsDefinition? scenes+=Scene*;
	public ScriptElements getScriptAccess() {
		return (pScript != null) ? pScript : (pScript = new ScriptElements());
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//CharactersDefintion:
	//
	//	"characters" ":" characters+=CharacterDefinition ("," characters+=CharacterDefinition)*;
	public CharactersDefintionElements getCharactersDefintionAccess() {
		return (pCharactersDefintion != null) ? pCharactersDefintion : (pCharactersDefintion = new CharactersDefintionElements());
	}
	
	public ParserRule getCharactersDefintionRule() {
		return getCharactersDefintionAccess().getRule();
	}

	//CharacterDefinition:
	//
	//	importedNamespace=ID;
	public CharacterDefinitionElements getCharacterDefinitionAccess() {
		return (pCharacterDefinition != null) ? pCharacterDefinition : (pCharacterDefinition = new CharacterDefinitionElements());
	}
	
	public ParserRule getCharacterDefinitionRule() {
		return getCharacterDefinitionAccess().getRule();
	}

	//SwitchesDefinition:
	//
	//	"switches" ":" switches+=SwitchDefinition ("," switches+=SwitchDefinition)*;
	public SwitchesDefinitionElements getSwitchesDefinitionAccess() {
		return (pSwitchesDefinition != null) ? pSwitchesDefinition : (pSwitchesDefinition = new SwitchesDefinitionElements());
	}
	
	public ParserRule getSwitchesDefinitionRule() {
		return getSwitchesDefinitionAccess().getRule();
	}

	//SwitchDefinition:
	//
	//	name=ID ("is" value=SwitchValue)?;
	public SwitchDefinitionElements getSwitchDefinitionAccess() {
		return (pSwitchDefinition != null) ? pSwitchDefinition : (pSwitchDefinition = new SwitchDefinitionElements());
	}
	
	public ParserRule getSwitchDefinitionRule() {
		return getSwitchDefinitionAccess().getRule();
	}

	//ConditionsDefinition:
	//
	//	"conditions" conditions+=ConditionDefinition conditions+=ConditionDefinition* "end";
	public ConditionsDefinitionElements getConditionsDefinitionAccess() {
		return (pConditionsDefinition != null) ? pConditionsDefinition : (pConditionsDefinition = new ConditionsDefinitionElements());
	}
	
	public ParserRule getConditionsDefinitionRule() {
		return getConditionsDefinitionAccess().getRule();
	}

	//ConditionDefinition:
	//
	//	name=ID "when" switchList=SwitchList;
	public ConditionDefinitionElements getConditionDefinitionAccess() {
		return (pConditionDefinition != null) ? pConditionDefinition : (pConditionDefinition = new ConditionDefinitionElements());
	}
	
	public ParserRule getConditionDefinitionRule() {
		return getConditionDefinitionAccess().getRule();
	}

	//Scene:
	//
	//	{Scene} "scene" name=StringID dialog=Dialog "end" "scene";
	public SceneElements getSceneAccess() {
		return (pScene != null) ? pScene : (pScene = new SceneElements());
	}
	
	public ParserRule getSceneRule() {
		return getSceneAccess().getRule();
	}

	//Dialog:
	//
	//	{Dialog} defaults=Defaults? firstTime=FirstTime? recursives+=Recursive* partingLines=PartingLines?;
	public DialogElements getDialogAccess() {
		return (pDialog != null) ? pDialog : (pDialog = new DialogElements());
	}
	
	public ParserRule getDialogRule() {
		return getDialogAccess().getRule();
	}

	//Recursive:
	//
	//	Conditional | Hub | DialogLine;
	public RecursiveElements getRecursiveAccess() {
		return (pRecursive != null) ? pRecursive : (pRecursive = new RecursiveElements());
	}
	
	public ParserRule getRecursiveRule() {
		return getRecursiveAccess().getRule();
	}

	//Defaults:
	//
	//	{Defaults} "defaults" comment=COMMENT? body=ConditionalBody "end";
	public DefaultsElements getDefaultsAccess() {
		return (pDefaults != null) ? pDefaults : (pDefaults = new DefaultsElements());
	}
	
	public ParserRule getDefaultsRule() {
		return getDefaultsAccess().getRule();
	}

	//FirstTime:
	//
	//	{FirstTime} "first" "time" comment=COMMENT? body=ConditionalBody otherTimes=OtherTimes? "end";
	public FirstTimeElements getFirstTimeAccess() {
		return (pFirstTime != null) ? pFirstTime : (pFirstTime = new FirstTimeElements());
	}
	
	public ParserRule getFirstTimeRule() {
		return getFirstTimeAccess().getRule();
	}

	//OtherTimes:
	//
	//	{OtherTimes} "else" comment=COMMENT? body=ConditionalBody;
	public OtherTimesElements getOtherTimesAccess() {
		return (pOtherTimes != null) ? pOtherTimes : (pOtherTimes = new OtherTimesElements());
	}
	
	public ParserRule getOtherTimesRule() {
		return getOtherTimesAccess().getRule();
	}

	//PartingLines:
	//
	//	{PartingLines} "parting" comment=COMMENT? body=ConditionalBody "end";
	public PartingLinesElements getPartingLinesAccess() {
		return (pPartingLines != null) ? pPartingLines : (pPartingLines = new PartingLinesElements());
	}
	
	public ParserRule getPartingLinesRule() {
		return getPartingLinesAccess().getRule();
	}

	//Hub:
	//
	//	isHidden?="hidden"? "hub" name=StringID hubComment=COMMENT? choiceDialogs+=AbstractChoiceDialog* "end";
	public HubElements getHubAccess() {
		return (pHub != null) ? pHub : (pHub = new HubElements());
	}
	
	public ParserRule getHubRule() {
		return getHubAccess().getRule();
	}

	//AbstractChoiceDialog:
	//
	//	ChoiceDialog | ConditionalChoiceDialog | Conditional;
	public AbstractChoiceDialogElements getAbstractChoiceDialogAccess() {
		return (pAbstractChoiceDialog != null) ? pAbstractChoiceDialog : (pAbstractChoiceDialog = new AbstractChoiceDialogElements());
	}
	
	public ParserRule getAbstractChoiceDialogRule() {
		return getAbstractChoiceDialogAccess().getRule();
	}

	//ConditionalChoiceDialog:
	//
	//	modifiers+=Modifier* "choices" "if" "(" conditionList=ConditionList ")" comment=COMMENT? choiceDialogs+=ChoiceDialog+
	//
	//	otherwiseChoices+=OtherwiseChoice* "end";
	public ConditionalChoiceDialogElements getConditionalChoiceDialogAccess() {
		return (pConditionalChoiceDialog != null) ? pConditionalChoiceDialog : (pConditionalChoiceDialog = new ConditionalChoiceDialogElements());
	}
	
	public ParserRule getConditionalChoiceDialogRule() {
		return getConditionalChoiceDialogAccess().getRule();
	}

	//OtherwiseChoice:
	//
	//	modifiers+=Modifier* "choices" "else" ("if" "(" conditionList=ConditionList ")")? comment=COMMENT?
	//
	//	choices+=ChoiceDialog+;
	public OtherwiseChoiceElements getOtherwiseChoiceAccess() {
		return (pOtherwiseChoice != null) ? pOtherwiseChoice : (pOtherwiseChoice = new OtherwiseChoiceElements());
	}
	
	public ParserRule getOtherwiseChoiceRule() {
		return getOtherwiseChoiceAccess().getRule();
	}

	//StringID:
	//
	//	STRING;
	public StringIDElements getStringIDAccess() {
		return (pStringID != null) ? pStringID : (pStringID = new StringIDElements());
	}
	
	public ParserRule getStringIDRule() {
		return getStringIDAccess().getRule();
	}

	//ChoiceDialog:
	//
	//	{ChoiceDialog} modifiers+=Modifier* "choice" name=StringID choiceComment=COMMENT? body=ConditionalBody "end";
	public ChoiceDialogElements getChoiceDialogAccess() {
		return (pChoiceDialog != null) ? pChoiceDialog : (pChoiceDialog = new ChoiceDialogElements());
	}
	
	public ParserRule getChoiceDialogRule() {
		return getChoiceDialogAccess().getRule();
	}

	//enum Modifier:
	//
	//	single | random;
	public ModifierElements getModifierAccess() {
		return (unknownRuleModifier != null) ? unknownRuleModifier : (unknownRuleModifier = new ModifierElements());
	}
	
	public EnumRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//ConditionList:
	//
	//	conditions+=[ConditionDefinition] ("or" conditions+=[ConditionDefinition])*;
	public ConditionListElements getConditionListAccess() {
		return (pConditionList != null) ? pConditionList : (pConditionList = new ConditionListElements());
	}
	
	public ParserRule getConditionListRule() {
		return getConditionListAccess().getRule();
	}

	//Jump:
	//
	//	Exit | InvokeHub | InvokeScene;
	public JumpElements getJumpAccess() {
		return (pJump != null) ? pJump : (pJump = new JumpElements());
	}
	
	public ParserRule getJumpRule() {
		return getJumpAccess().getRule();
	}

	//InvokeHub:
	//
	//	"enter" "hub" hub=[Hub|StringID];
	public InvokeHubElements getInvokeHubAccess() {
		return (pInvokeHub != null) ? pInvokeHub : (pInvokeHub = new InvokeHubElements());
	}
	
	public ParserRule getInvokeHubRule() {
		return getInvokeHubAccess().getRule();
	}

	//InvokeScene:
	//
	//	"enter" "scene" scene=[Scene|StringID];
	public InvokeSceneElements getInvokeSceneAccess() {
		return (pInvokeScene != null) ? pInvokeScene : (pInvokeScene = new InvokeSceneElements());
	}
	
	public ParserRule getInvokeSceneRule() {
		return getInvokeSceneAccess().getRule();
	}

	//Exit:
	//
	//	{Exit} "exit" (exitHub?="hub" | exitScene?="scene");
	public ExitElements getExitAccess() {
		return (pExit != null) ? pExit : (pExit = new ExitElements());
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	//Conditional:
	//
	//	modifiers+=Modifier* "if" "(" conditionList=ConditionList ")" comment=COMMENT? body=ConditionalBody
	//
	//	otherwiseList+=Otherwise* "end";
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//SwitchList:
	//
	//	switches+=Switch ("and" switches+=Switch)*;
	public SwitchListElements getSwitchListAccess() {
		return (pSwitchList != null) ? pSwitchList : (pSwitchList = new SwitchListElements());
	}
	
	public ParserRule getSwitchListRule() {
		return getSwitchListAccess().getRule();
	}

	//Switch:
	//
	//	switch=[SwitchDefinition] "is" value=SwitchValue;
	public SwitchElements getSwitchAccess() {
		return (pSwitch != null) ? pSwitch : (pSwitch = new SwitchElements());
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}

	//enum SwitchValue:
	//
	//	on | off;
	public SwitchValueElements getSwitchValueAccess() {
		return (unknownRuleSwitchValue != null) ? unknownRuleSwitchValue : (unknownRuleSwitchValue = new SwitchValueElements());
	}
	
	public EnumRule getSwitchValueRule() {
		return getSwitchValueAccess().getRule();
	}

	//ConditionalBody:
	//
	//	{ConditionalBody} statements+=Statement* switchOn=SwitchOn? switchOff=SwitchOff? jump=Jump?;
	public ConditionalBodyElements getConditionalBodyAccess() {
		return (pConditionalBody != null) ? pConditionalBody : (pConditionalBody = new ConditionalBodyElements());
	}
	
	public ParserRule getConditionalBodyRule() {
		return getConditionalBodyAccess().getRule();
	}

	//Statement:
	//
	//	DialogLine | Conditional;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Otherwise:
	//
	//	modifiers+=Modifier* "else" ("if" "(" conditionList=ConditionList ")")? comment=COMMENT? body=ConditionalBody;
	public OtherwiseElements getOtherwiseAccess() {
		return (pOtherwise != null) ? pOtherwise : (pOtherwise = new OtherwiseElements());
	}
	
	public ParserRule getOtherwiseRule() {
		return getOtherwiseAccess().getRule();
	}

	//SwitchOff:
	//
	//	"switch" "off" sets+=[SwitchDefinition] ("," sets+=[SwitchDefinition])* comment=COMMENT?;
	public SwitchOffElements getSwitchOffAccess() {
		return (pSwitchOff != null) ? pSwitchOff : (pSwitchOff = new SwitchOffElements());
	}
	
	public ParserRule getSwitchOffRule() {
		return getSwitchOffAccess().getRule();
	}

	//SwitchOn:
	//
	//	"switch" "on" sets+=[SwitchDefinition] ("," sets+=[SwitchDefinition])* comment=COMMENT?;
	public SwitchOnElements getSwitchOnAccess() {
		return (pSwitchOn != null) ? pSwitchOn : (pSwitchOn = new SwitchOnElements());
	}
	
	public ParserRule getSwitchOnRule() {
		return getSwitchOnAccess().getRule();
	}

	//DialogLine:
	//
	//	character=[chara::Character] ":" lines=StringID comment=COMMENT?;
	public DialogLineElements getDialogLineAccess() {
		return (pDialogLine != null) ? pDialogLine : (pDialogLine = new DialogLineElements());
	}
	
	public ParserRule getDialogLineRule() {
		return getDialogLineAccess().getRule();
	}

	////character=[CharacterDefinition] ':' lines=StringID comment=COMMENT?;
	//
	//terminal COMMENT:
	//
	//	"["->"]";
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\" | "{") | WILDCARD | !("\\" | "\"" | "{"))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal fragment WILDCARD:
	//
	//	"{" ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* "}";
	public TerminalRule getWILDCARDRule() {
		return (tWILDCARD != null) ? tWILDCARD : (tWILDCARD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WILDCARD"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
