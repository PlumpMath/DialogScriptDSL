grammar de.unidue.ecg.dialogScript.DialogScript with org.eclipse.xtext.common.Terminals

generate dialogScript "http://www.unidue.de/ecg/rw/ince/dialogScript/DialogScript"

Script:{Script}
	charactersDefinition=CharactersDefintion?
	switchesDefinition=SwitchesDefinition?
	conditionsDefinition=ConditionsDefinition?
	scenes+=Scene*;

CharactersDefintion:
	'characters' ':' characters+=CharacterDefinition (',' characters+=CharacterDefinition)*;

CharacterDefinition:
	name=ID;

SwitchesDefinition:
	'switches' ':' switches+=SwitchDefinition (',' switches+=SwitchDefinition)*;

SwitchDefinition:
	name=ID ('is' value=SwitchValue)?;

ConditionsDefinition:
	'conditions'
		conditions+=ConditionDefinition (conditions+=ConditionDefinition)*
	'end';

ConditionDefinition:
	name=ID 'when' switchList=SwitchList;

Scene:{Scene}
	'scene' name=StringLiteral
		dialog=Dialog
	'end' 'scene';

Dialog: {Dialog}
	defaults=Defaults?
	firstTime=FirstTime?
	recurisves+=Recursive*
	partingLines=PartingLines?;
	
Recursive:
	Conditional | Hub | DialogLine
;

Defaults: {Defaults}
	'defaults' comment=COMMENT?
		body=ConditionalBody
	'end';

FirstTime:{FirstTime}
	'first' 'time' comment=COMMENT?
		body=ConditionalBody
		otherTimes=OtherTimes?
	'end';

OtherTimes:{OtherTimes}
	'else' comment=COMMENT?
		body=ConditionalBody;

PartingLines:{PartingLines}
	'parting' comment=COMMENT?
		body=ConditionalBody
	'end';

Hub:
	(isHidden?='hidden')? 'hub' name=StringLiteral hubComment=COMMENT?
		choiceDialogs+=AbstractChoiceDialog*
	'end';

AbstractChoiceDialog:
	ChoiceDialog | ConditionalChoiceDialog | Conditional ;

ConditionalChoiceDialog:
	modifiers+=Modifier* 'choices' 'if' '(' conditionList=ConditionList ')' comment=COMMENT?
		choiceDialogs+=ChoiceDialog+
		otherwiseChoices+=OtherwiseChoice*
	'end';
	
OtherwiseChoice:
	modifiers+=Modifier* 'choices' 'else' ( => 'if' '(' conditionList=ConditionList ')')? comment=COMMENT?
	choices+=ChoiceDialog+;

//StringID:
//	StringLiteral;

ChoiceDialog:{ChoiceDialog}
	modifiers+=Modifier* 'choice' name=StringLiteral choiceComment=COMMENT?
		body=ConditionalBody
	'end';

enum Modifier:
	single | random;

ConditionList:
	conditions+=[ConditionDefinition] ('or' conditions+=[ConditionDefinition])*;

Jump:
	Exit | InvokeHub | InvokeScene
;

InvokeHub:
	'enter' 'hub' hub=[Hub|STRING]
;

InvokeScene:
	'enter' 'scene' scene=[Scene|STRING]
;
	
Exit:{Exit}
	'exit' (exitHub?='hub' | exitScene?='scene');

Conditional:
	modifiers+=Modifier* 'if' '(' conditionList=ConditionList ')' comment=COMMENT?
		body=ConditionalBody
		otherwiseList+=Otherwise*
	'end';

SwitchList:
	switches+=Switch ('and' switches+=Switch)*;

Switch:
	switch=[SwitchDefinition] 'is' value=SwitchValue;
	
enum SwitchValue:
	on|off
;

ConditionalBody: {ConditionalBody}
	statements+=Statement* 
	switchOn=SwitchOn?
	switchOff=SwitchOff?
	jump=Jump?;

Statement:
	DialogLine | Conditional;

Otherwise:
	modifiers+=Modifier* 'else' ( => 'if' '(' conditionList=ConditionList ')')? comment=COMMENT?
	body=ConditionalBody;

SwitchOff:
	'switch' 'off' sets+=[SwitchDefinition] (',' sets+=[SwitchDefinition])* comment=COMMENT?;
	
SwitchOn:
	'switch' 'on' sets+=[SwitchDefinition] (',' sets+=[SwitchDefinition])* comment=COMMENT?;

DialogLine:
	character=[CharacterDefinition] ':' lines=StringLiteral comment=COMMENT?;

StringLiteral hidden():{EString}
    begin='"' 
      parts+=PlainString?
      (parts+=Wildcard parts+=PlainString?)*
    end='"'
    |
    begin="'" 
      parts+=PlainString?
      (parts+=Wildcard parts+=PlainString?)*
    end="'"
;

Wildcard hidden():
  '${' WildcardID '}';
  
WildcardID returns Wildcard hidden(WS, ML_COMMENT, SL_COMMENT):
  name=ID;

PlainString: {EString}
  value=ConstantValue;

// To identify other keywords as allowed parts in a string,
// we use a customized lexer with predicates. 
// This allows us to use e.g. single quotes without escape sequences
// in double quoted strings and vice versa.
ConstantValue:
  (WS|
  ANY_OTHER|
  ID|
  'characters'|
  'switches'|
  'conditions'|
  'end'|
  'is'|
  'when'|
  'scene'|
  'switch'|
  'on'|
  'off'|
  'if'|
  'else'|
  'and'|
  'or'|
  'hub'|
  'exit'|
  'enter'|
  'choices'|
  'choice'|
  'hidden'|
  'defaults'|
  'parting'|
  'first'|
  'random'|
  'single'|
  "\\'" |  
  '\\${' | 
  '\\\\'|
  ','|
  '('|
  ')'|
  ':'|
  '{'|
  '}'|
  '['|
  ']')+;

terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//terminal STRING	: 
//			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|"'"|'\\') | !('\\'|"'") )* "'" |
//			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\') | !('\\'|'"') )* '"'; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS	: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;

terminal COMMENT:
	'['->']';

//terminal STRING	: 
//			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\'|'$') | !('\\'|'"'|'$') )* '"' |
//			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\'|'$') | !('\\'|"'"|'$') )* "'" 
//		;  
//
//terminal fragment WILDCARD:
//	'{' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '}'
//;
