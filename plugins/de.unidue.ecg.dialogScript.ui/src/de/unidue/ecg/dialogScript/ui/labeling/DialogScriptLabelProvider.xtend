/*
* generated by Xtext
*/
package de.unidue.ecg.dialogScript.ui.labeling

import com.google.inject.Inject
import de.unidue.ecg.dialogScript.dialogScript.ConditionList
import de.unidue.ecg.dialogScript.dialogScript.Conditional
import de.unidue.ecg.dialogScript.dialogScript.ConditionalBody
import de.unidue.ecg.dialogScript.dialogScript.ConditionsDefinition
import de.unidue.ecg.dialogScript.dialogScript.Defaults
import de.unidue.ecg.dialogScript.dialogScript.DialogLine
import de.unidue.ecg.dialogScript.dialogScript.FirstTime
import de.unidue.ecg.dialogScript.dialogScript.OtherTimes
import de.unidue.ecg.dialogScript.dialogScript.Otherwise
import de.unidue.ecg.dialogScript.dialogScript.PartingLines
import de.unidue.ecg.dialogScript.dialogScript.Scene
import de.unidue.ecg.dialogScript.dialogScript.Script
import de.unidue.ecg.dialogScript.dialogScript.SwitchDefinition
import de.unidue.ecg.dialogScript.dialogScript.SwitchOff
import java.util.Iterator
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import de.unidue.ecg.dialogScript.dialogScript.SwitchesDefinition
import de.unidue.ecg.dialogScript.dialogScript.SwitchOn
import de.unidue.ecg.dialogScript.dialogScript.SwitchList
import de.unidue.ecg.dialogScript.dialogScript.Switch
import de.unidue.ecg.dialogScript.dialogScript.Exit
import de.unidue.ecg.dialogScript.dialogScript.Hub
import de.unidue.ecg.dialogScript.dialogScript.ConditionalChoiceDialog
import de.unidue.ecg.dialogScript.dialogScript.OtherwiseChoice
import de.unidue.ecg.dialogScript.dialogScript.ChoiceDialog
import de.unidue.ecg.dialogScript.dialogScript.InvokeHub
import de.unidue.ecg.dialogScript.dialogScript.InvokeScene
import de.unidue.ecg.dialogScript.dialogScript.Modifier
import java.util.List
import de.unidue.ecg.dialogScript.dialogScript.CharactersDefinition

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class DialogScriptLabelProvider extends DefaultEObjectLabelProvider {

	@Inject 
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(Script script) {
		'Dialog script: ' + script.eResource.URI.lastSegment
	}

	def text(CharactersDefinition ele) {
		'characters'
	}

	def text(SwitchesDefinition ele) {
		'switches'
	}

	def text(ConditionsDefinition ele) {
		'conditions'
	}

	def text(Scene scene) {
		'scene ' + scene.name
	}

	def text(Defaults defaults) {
		'default lines'
	}

	def text(Hub hub) {
		'hub ' + hub.name
	}

	def text(ConditionalChoiceDialog ele) {
		createModifiers(ele.modifiers) + 'conditional choice'
	}
	
	def text(InvokeHub ele) {
		if(ele != null) {
			'enter hub ' + ele.hub.name
		}
	}
	
	def text(InvokeScene ele) {
		if(ele != null) {
			'enter scene ' + ele.scene.name
		}
	}

	def text(Exit exit) {
		if (exit != null) {
			if (exit.exitHub)
				'exit hub'
			else if (exit.exitScene)
				'exit scene'
		}

	}

	def text(DialogLine line) {
		line.character.name + ": " + line.lines
	}

	def text(FirstTime firstTime) {
		'first time'
	}

	def text(OtherTimes otherTimes) {
		'other times'
	}

	def text(ConditionList list) {
		if (list.eContainer instanceof Conditional || list.eContainer instanceof ConditionalChoiceDialog)
			'condition: ' + createConditionText(list)
		else if (list.eContainer instanceof Otherwise || list.eContainer instanceof OtherwiseChoice)
			'otherwise: ' + createConditionText(list)
	}

	def text(ChoiceDialog choiceDialog) {
		createModifiers(choiceDialog.modifiers) + 'choice ' + choiceDialog.name
	}

	def createModifiers(List<Modifier> modifiers) {
		var result = ''
		for(m : modifiers) {
			result = result + m.getName + ' '
		}
		result
	}

	def text(Otherwise otherwise) {
		'otherwise' + if(otherwise.conditionList == null) " " else ": " + createConditionText(otherwise.conditionList)
	}
	
	def text(OtherwiseChoice otherwise) {
		'otherwise' + if(otherwise.conditionList == null) " " else ": " + createConditionText(otherwise.conditionList)
	}

	def text(Conditional conditional) {
		createModifiers(conditional.modifiers) + 'conditional dialog'
	}

	def text(ConditionalBody body) {
		'body'
	}

	def text(SwitchList switchList) {
		'when ' + createSwitchList(switchList.switches.iterator)
	}

	def createSwitchList(Iterator<Switch> iterator) {
		var result = ''

		while (iterator.hasNext) {
			val ^switch = iterator.next
			result = result + ^switch.^switch.name + ' is ' + ^switch.^switch.value

			if (iterator.hasNext)
				result = result + 'and '
		}

		result
	}

	def text(Switch ^switch) {
		^switch.^switch.name
	}

	def text(SwitchDefinition switchDefinition) {
		switchDefinition.name
	}

	def createConditionText(ConditionList conditionList) {

		var result = ''

		if (conditionList.conditions != null && !conditionList.conditions.empty) {
			val iterator = conditionList.conditions.iterator
			while (iterator.hasNext) {
				val condition = iterator.next
				result = result + condition.name
				result = result + if(iterator.hasNext) ' or ' else ''
			}
		}
		result
	}

	def text(SwitchOff switchOff) {
		'switched off: ' + createSwitchSet(switchOff.sets.iterator)
	}

	def text(SwitchOn switchOn) {
		'switched on: ' + createSwitchSet(switchOn.sets.iterator)
	}

	def createSwitchSet(Iterator<SwitchDefinition> iterator) {

		var result = ""

		while (iterator.hasNext) {
			result = result + iterator.next.name

			if (iterator.hasNext)
				result = result + ", "
		}

		result
	}

	def text(PartingLines partingLines) {
		'parting lines'
	}
}
