/*
 * generated by Xtext
 */
package de.unidue.ecg.characterScript.scoping

import de.unidue.ecg.characterScript.characterScript.Template
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import org.eclipse.xtext.util.Strings

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class CharacterScriptScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {

	override protected createImportedNamespaceResolver(String namespace, boolean ignoreCase) {
		var newNamespace = namespace

		if (!Strings.isEmpty(namespace))
			newNamespace = newNamespace + ".*"
		super.createImportedNamespaceResolver(newNamespace, ignoreCase)
	}

	override protected getImportedNamespace(EObject object) {
		val importedNamespace = super.getImportedNamespace(object)
		if (importedNamespace == null) {
			if (object instanceof Template) {
				val feature = object.eClass.getEStructuralFeature("name")
				if (feature != null && String.equals(feature.EType.instanceClass)) {
					return object.eGet(feature) as String
				}
			}
		}
		importedNamespace
	}
	
//	override protected internalGetImportedNamespaceResolvers(EObject context, boolean ignoreCase) {
//
//		//super.internalGetImportedNamespaceResolvers(context, ignoreCase)
//		val importedNamespaceResolvers = newArrayList
//		val eContents = context.eContents
//		for (EObject child : eContents) {
//			val value = child.importedNamespace
//			val resolver = createImportedNamespaceResolver(value, ignoreCase)
//			if (resolver != null) {
//				importedNamespaceResolvers.add(resolver)
//				child.eResource.resourceSet.resources.filter(XtextResource).forEach [
//					it.allContents.filter(Template).forEach [
//						switch it {
//							case name.equals(value): {
//								customs.forEach[
//									switch it {
//										case !enumValues.empty: {
//											val enumResolver = createImportedNamespaceResolver(value + '.' + name, ignoreCase)
//											if(enumResolver != null) {
//												importedNamespaceResolvers.add(enumResolver)
//											}
//										}
//									}
//								]
//							}
//						}
//					]
//				]
//			}
//		}
//		return importedNamespaceResolvers
//	}
}
