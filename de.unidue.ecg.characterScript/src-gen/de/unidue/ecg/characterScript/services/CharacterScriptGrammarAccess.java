/*
* generated by Xtext
*/
package de.unidue.ecg.characterScript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CharacterScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CharactersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Characters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cTemplatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTemplatesTemplateParserRuleCall_1_0 = (RuleCall)cTemplatesAssignment_1.eContents().get(0);
		private final Assignment cCustomsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCustomsCustomsParserRuleCall_2_0 = (RuleCall)cCustomsAssignment_2.eContents().get(0);
		private final Assignment cCharactersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCharactersCharacterParserRuleCall_3_0 = (RuleCall)cCharactersAssignment_3.eContents().get(0);
		
		//Characters:
		//	imports+=Import* templates+=Template* customs=Customs? characters+=Character*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* templates+=Template* customs=Customs? characters+=Character*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//templates+=Template*
		public Assignment getTemplatesAssignment_1() { return cTemplatesAssignment_1; }

		//Template
		public RuleCall getTemplatesTemplateParserRuleCall_1_0() { return cTemplatesTemplateParserRuleCall_1_0; }

		//customs=Customs?
		public Assignment getCustomsAssignment_2() { return cCustomsAssignment_2; }

		//Customs
		public RuleCall getCustomsCustomsParserRuleCall_2_0() { return cCustomsCustomsParserRuleCall_2_0; }

		//characters+=Character*
		public Assignment getCharactersAssignment_3() { return cCharactersAssignment_3; }

		//Character
		public RuleCall getCharactersCharacterParserRuleCall_3_0() { return cCharactersCharacterParserRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceIDTerminalRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=ID;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ID
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ID
		public RuleCall getImportedNamespaceIDTerminalRuleCall_1_0() { return cImportedNamespaceIDTerminalRuleCall_1_0; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDefaultsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultsDefaultAttributeParserRuleCall_2_0 = (RuleCall)cDefaultsAssignment_2.eContents().get(0);
		private final Assignment cCustomsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCustomsCustomAttributeParserRuleCall_3_0 = (RuleCall)cCustomsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Template:
		//	"template" name=ID defaults+=DefaultAttribute* customs+=CustomAttribute* "end";
		public ParserRule getRule() { return rule; }

		//"template" name=ID defaults+=DefaultAttribute* customs+=CustomAttribute* "end"
		public Group getGroup() { return cGroup; }

		//"template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//defaults+=DefaultAttribute*
		public Assignment getDefaultsAssignment_2() { return cDefaultsAssignment_2; }

		//DefaultAttribute
		public RuleCall getDefaultsDefaultAttributeParserRuleCall_2_0() { return cDefaultsDefaultAttributeParserRuleCall_2_0; }

		//customs+=CustomAttribute*
		public Assignment getCustomsAssignment_3() { return cCustomsAssignment_3; }

		//CustomAttribute
		public RuleCall getCustomsCustomAttributeParserRuleCall_3_0() { return cCustomsCustomAttributeParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class DefaultAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullNameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAgeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSexKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//DefaultAttribute:
		//	"full name" | "age" | "description" | "sex" | "type";
		public ParserRule getRule() { return rule; }

		//"full name" | "age" | "description" | "sex" | "type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"full name"
		public Keyword getFullNameKeyword_0() { return cFullNameKeyword_0; }

		//"age"
		public Keyword getAgeKeyword_1() { return cAgeKeyword_1; }

		//"description"
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//"sex"
		public Keyword getSexKeyword_3() { return cSexKeyword_3; }

		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
	}

	public class CustomAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaNameCustomAttributeNameParserRuleCall_0_0 = (RuleCall)cCaNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEnumValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEnumValuesEnumValueParserRuleCall_2_1_1_0 = (RuleCall)cEnumValuesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cEnumValuesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cEnumValuesEnumValueParserRuleCall_2_1_2_1_0 = (RuleCall)cEnumValuesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//CustomAttribute:
		//	caName=CustomAttributeName "as" (type=AttributeType | "(" enumValues+=EnumValue ("," enumValues+=EnumValue)* ")");
		public ParserRule getRule() { return rule; }

		//caName=CustomAttributeName "as" (type=AttributeType | "(" enumValues+=EnumValue ("," enumValues+=EnumValue)* ")")
		public Group getGroup() { return cGroup; }

		//caName=CustomAttributeName
		public Assignment getCaNameAssignment_0() { return cCaNameAssignment_0; }

		//CustomAttributeName
		public RuleCall getCaNameCustomAttributeNameParserRuleCall_0_0() { return cCaNameCustomAttributeNameParserRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//type=AttributeType | "(" enumValues+=EnumValue ("," enumValues+=EnumValue)* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=AttributeType
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_2_0_0() { return cTypeAttributeTypeEnumRuleCall_2_0_0; }

		//"(" enumValues+=EnumValue ("," enumValues+=EnumValue)* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//enumValues+=EnumValue
		public Assignment getEnumValuesAssignment_2_1_1() { return cEnumValuesAssignment_2_1_1; }

		//EnumValue
		public RuleCall getEnumValuesEnumValueParserRuleCall_2_1_1_0() { return cEnumValuesEnumValueParserRuleCall_2_1_1_0; }

		//("," enumValues+=EnumValue)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//enumValues+=EnumValue
		public Assignment getEnumValuesAssignment_2_1_2_1() { return cEnumValuesAssignment_2_1_2_1; }

		//EnumValue
		public RuleCall getEnumValuesEnumValueParserRuleCall_2_1_2_1_0() { return cEnumValuesEnumValueParserRuleCall_2_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}

	public class CustomAttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomAttributeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CustomAttributeName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumValue:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CustomsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Customs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAttributesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCustomAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCustomAttributesCustomAttributeParserRuleCall_2_0 = (RuleCall)cCustomAttributesAssignment_2.eContents().get(0);
		private final Assignment cCustomAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCustomAttributesCustomAttributeParserRuleCall_3_0 = (RuleCall)cCustomAttributesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Customs:
		//	"custom" "attributes" customAttributes+=CustomAttribute customAttributes+=CustomAttribute* "end";
		public ParserRule getRule() { return rule; }

		//"custom" "attributes" customAttributes+=CustomAttribute customAttributes+=CustomAttribute* "end"
		public Group getGroup() { return cGroup; }

		//"custom"
		public Keyword getCustomKeyword_0() { return cCustomKeyword_0; }

		//"attributes"
		public Keyword getAttributesKeyword_1() { return cAttributesKeyword_1; }

		//customAttributes+=CustomAttribute
		public Assignment getCustomAttributesAssignment_2() { return cCustomAttributesAssignment_2; }

		//CustomAttribute
		public RuleCall getCustomAttributesCustomAttributeParserRuleCall_2_0() { return cCustomAttributesCustomAttributeParserRuleCall_2_0; }

		//customAttributes+=CustomAttribute*
		public Assignment getCustomAttributesAssignment_3() { return cCustomAttributesAssignment_3; }

		//CustomAttribute
		public RuleCall getCustomAttributesCustomAttributeParserRuleCall_3_0() { return cCustomAttributesCustomAttributeParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTemplateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTemplateTemplateCrossReference_2_1_0 = (CrossReference)cTemplateAssignment_2_1.eContents().get(0);
		private final RuleCall cTemplateTemplateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTemplateTemplateCrossReference_2_1_0.eContents().get(1);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Character:
		//	"character" name=ID ("uses" template=[Template])? properties+=Property* "end";
		public ParserRule getRule() { return rule; }

		//"character" name=ID ("uses" template=[Template])? properties+=Property* "end"
		public Group getGroup() { return cGroup; }

		//"character"
		public Keyword getCharacterKeyword_0() { return cCharacterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("uses" template=[Template])?
		public Group getGroup_2() { return cGroup_2; }

		//"uses"
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }

		//template=[Template]
		public Assignment getTemplateAssignment_2_1() { return cTemplateAssignment_2_1; }

		//[Template]
		public CrossReference getTemplateTemplateCrossReference_2_1_0() { return cTemplateTemplateCrossReference_2_1_0; }

		//ID
		public RuleCall getTemplateTemplateIDTerminalRuleCall_2_1_0_1() { return cTemplateTemplateIDTerminalRuleCall_2_1_0_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	DefaultProperty | CustomProperty;
		public ParserRule getRule() { return rule; }

		//DefaultProperty | CustomProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefaultProperty
		public RuleCall getDefaultPropertyParserRuleCall_0() { return cDefaultPropertyParserRuleCall_0; }

		//CustomProperty
		public RuleCall getCustomPropertyParserRuleCall_1() { return cCustomPropertyParserRuleCall_1; }
	}

	public class DefaultPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAgeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSexParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//DefaultProperty:
		//	FullName | Description | Type | Age | Sex;
		public ParserRule getRule() { return rule; }

		//FullName | Description | Type | Age | Sex
		public Alternatives getAlternatives() { return cAlternatives; }

		//FullName
		public RuleCall getFullNameParserRuleCall_0() { return cFullNameParserRuleCall_0; }

		//Description
		public RuleCall getDescriptionParserRuleCall_1() { return cDescriptionParserRuleCall_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }

		//Age
		public RuleCall getAgeParserRuleCall_3() { return cAgeParserRuleCall_3; }

		//Sex
		public RuleCall getSexParserRuleCall_4() { return cSexParserRuleCall_4; }
	}

	public class FullNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//FullName:
		//	"full name" value=STRING comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"full name" value=STRING comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"full name"
		public Keyword getFullNameKeyword_0() { return cFullNameKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//Description:
		//	"description" value=STRING comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"description" value=STRING comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"description"
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCharaTypeEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//Type:
		//	"type" value=CharaType comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"type" value=CharaType comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//value=CharaType
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CharaType
		public RuleCall getValueCharaTypeEnumRuleCall_1_0() { return cValueCharaTypeEnumRuleCall_1_0; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }
	}

	public class AgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Age");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//Age:
		//	"age" value=INT comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"age" value=INT comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"age"
		public Keyword getAgeKeyword_0() { return cAgeKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }
	}

	public class SexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCharaSexEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//Sex:
		//	"sex" value=CharaSex comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//"sex" value=CharaSex comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//"sex"
		public Keyword getSexKeyword_0() { return cSexKeyword_0; }

		//value=CharaSex
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CharaSex
		public RuleCall getValueCharaSexEnumRuleCall_1_0() { return cValueCharaSexEnumRuleCall_1_0; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }
	}

	public class CustomPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCustomAttributeRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCustomAttributeRefCustomAttributeNameCrossReference_0_0 = (CrossReference)cCustomAttributeRefAssignment_0.eContents().get(0);
		private final RuleCall cCustomAttributeRefCustomAttributeNameIDTerminalRuleCall_0_0_1 = (RuleCall)cCustomAttributeRefCustomAttributeNameCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStringValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cStringValueAssignment_1_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_1_0 = (RuleCall)cIntValueAssignment_1_1.eContents().get(0);
		private final Assignment cEnumValueAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final CrossReference cEnumValueEnumValueCrossReference_1_2_0 = (CrossReference)cEnumValueAssignment_1_2.eContents().get(0);
		private final RuleCall cEnumValueEnumValueIDTerminalRuleCall_1_2_0_1 = (RuleCall)cEnumValueEnumValueCrossReference_1_2_0.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentCOMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//CustomProperty:
		//	customAttributeRef=[CustomAttributeName] (stringValue=STRING | intValue=INT | enumValue=[EnumValue])
		//	comment=COMMENT?;
		public ParserRule getRule() { return rule; }

		//customAttributeRef=[CustomAttributeName] (stringValue=STRING | intValue=INT | enumValue=[EnumValue]) comment=COMMENT?
		public Group getGroup() { return cGroup; }

		//customAttributeRef=[CustomAttributeName]
		public Assignment getCustomAttributeRefAssignment_0() { return cCustomAttributeRefAssignment_0; }

		//[CustomAttributeName]
		public CrossReference getCustomAttributeRefCustomAttributeNameCrossReference_0_0() { return cCustomAttributeRefCustomAttributeNameCrossReference_0_0; }

		//ID
		public RuleCall getCustomAttributeRefCustomAttributeNameIDTerminalRuleCall_0_0_1() { return cCustomAttributeRefCustomAttributeNameIDTerminalRuleCall_0_0_1; }

		//stringValue=STRING | intValue=INT | enumValue=[EnumValue]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_1_0() { return cStringValueAssignment_1_0; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_1_0_0() { return cStringValueSTRINGTerminalRuleCall_1_0_0; }

		//intValue=INT
		public Assignment getIntValueAssignment_1_1() { return cIntValueAssignment_1_1; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_1_0() { return cIntValueINTTerminalRuleCall_1_1_0; }

		//enumValue=[EnumValue]
		public Assignment getEnumValueAssignment_1_2() { return cEnumValueAssignment_1_2; }

		//[EnumValue]
		public CrossReference getEnumValueEnumValueCrossReference_1_2_0() { return cEnumValueEnumValueCrossReference_1_2_0; }

		//ID
		public RuleCall getEnumValueEnumValueIDTerminalRuleCall_1_2_0_1() { return cEnumValueEnumValueIDTerminalRuleCall_1_2_0_1; }

		//comment=COMMENT?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//COMMENT
		public RuleCall getCommentCOMMENTTerminalRuleCall_2_0() { return cCommentCOMMENTTerminalRuleCall_2_0; }
	}
	
	
	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNUMBERNUMBERKeyword_0_0 = (Keyword)cNUMBEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTEXTTEXTKeyword_1_0 = (Keyword)cTEXTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AttributeType:
		//	NUMBER | TEXT;
		public EnumRule getRule() { return rule; }

		//NUMBER | TEXT
		public Alternatives getAlternatives() { return cAlternatives; }

		//NUMBER
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_0() { return cNUMBEREnumLiteralDeclaration_0; }

		//"NUMBER"
		public Keyword getNUMBERNUMBERKeyword_0_0() { return cNUMBERNUMBERKeyword_0_0; }

		//TEXT
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_1() { return cTEXTEnumLiteralDeclaration_1; }

		//"TEXT"
		public Keyword getTEXTTEXTKeyword_1_0() { return cTEXTTEXTKeyword_1_0; }
	}

	public class CharaTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CharaType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPCPCKeyword_0_0 = (Keyword)cPCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNPCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNPCNPCKeyword_1_0 = (Keyword)cNPCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CharaType:
		//	PC | NPC;
		public EnumRule getRule() { return rule; }

		//PC | NPC
		public Alternatives getAlternatives() { return cAlternatives; }

		//PC
		public EnumLiteralDeclaration getPCEnumLiteralDeclaration_0() { return cPCEnumLiteralDeclaration_0; }

		//"PC"
		public Keyword getPCPCKeyword_0_0() { return cPCPCKeyword_0_0; }

		//NPC
		public EnumLiteralDeclaration getNPCEnumLiteralDeclaration_1() { return cNPCEnumLiteralDeclaration_1; }

		//"NPC"
		public Keyword getNPCNPCKeyword_1_0() { return cNPCNPCKeyword_1_0; }
	}

	public class CharaSexElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CharaSex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMaleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMaleMaleKeyword_0_0 = (Keyword)cMaleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFemaleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFemaleFemaleKeyword_1_0 = (Keyword)cFemaleEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CharaSex:
		//	male | female;
		public EnumRule getRule() { return rule; }

		//male | female
		public Alternatives getAlternatives() { return cAlternatives; }

		//male
		public EnumLiteralDeclaration getMaleEnumLiteralDeclaration_0() { return cMaleEnumLiteralDeclaration_0; }

		//"male"
		public Keyword getMaleMaleKeyword_0_0() { return cMaleMaleKeyword_0_0; }

		//female
		public EnumLiteralDeclaration getFemaleEnumLiteralDeclaration_1() { return cFemaleEnumLiteralDeclaration_1; }

		//"female"
		public Keyword getFemaleFemaleKeyword_1_0() { return cFemaleFemaleKeyword_1_0; }
	}
	
	private CharactersElements pCharacters;
	private ImportElements pImport;
	private TemplateElements pTemplate;
	private DefaultAttributeElements pDefaultAttribute;
	private CustomAttributeElements pCustomAttribute;
	private CustomAttributeNameElements pCustomAttributeName;
	private EnumValueElements pEnumValue;
	private AttributeTypeElements unknownRuleAttributeType;
	private CustomsElements pCustoms;
	private CharacterElements pCharacter;
	private PropertyElements pProperty;
	private DefaultPropertyElements pDefaultProperty;
	private FullNameElements pFullName;
	private DescriptionElements pDescription;
	private TypeElements pType;
	private CharaTypeElements unknownRuleCharaType;
	private AgeElements pAge;
	private SexElements pSex;
	private CharaSexElements unknownRuleCharaSex;
	private CustomPropertyElements pCustomProperty;
	private TerminalRule tCOMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CharacterScriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.unidue.ecg.characterScript.CharacterScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Characters:
	//	imports+=Import* templates+=Template* customs=Customs? characters+=Character*;
	public CharactersElements getCharactersAccess() {
		return (pCharacters != null) ? pCharacters : (pCharacters = new CharactersElements());
	}
	
	public ParserRule getCharactersRule() {
		return getCharactersAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=ID;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Template:
	//	"template" name=ID defaults+=DefaultAttribute* customs+=CustomAttribute* "end";
	public TemplateElements getTemplateAccess() {
		return (pTemplate != null) ? pTemplate : (pTemplate = new TemplateElements());
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//DefaultAttribute:
	//	"full name" | "age" | "description" | "sex" | "type";
	public DefaultAttributeElements getDefaultAttributeAccess() {
		return (pDefaultAttribute != null) ? pDefaultAttribute : (pDefaultAttribute = new DefaultAttributeElements());
	}
	
	public ParserRule getDefaultAttributeRule() {
		return getDefaultAttributeAccess().getRule();
	}

	//CustomAttribute:
	//	caName=CustomAttributeName "as" (type=AttributeType | "(" enumValues+=EnumValue ("," enumValues+=EnumValue)* ")");
	public CustomAttributeElements getCustomAttributeAccess() {
		return (pCustomAttribute != null) ? pCustomAttribute : (pCustomAttribute = new CustomAttributeElements());
	}
	
	public ParserRule getCustomAttributeRule() {
		return getCustomAttributeAccess().getRule();
	}

	//CustomAttributeName:
	//	name=ID;
	public CustomAttributeNameElements getCustomAttributeNameAccess() {
		return (pCustomAttributeName != null) ? pCustomAttributeName : (pCustomAttributeName = new CustomAttributeNameElements());
	}
	
	public ParserRule getCustomAttributeNameRule() {
		return getCustomAttributeNameAccess().getRule();
	}

	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return (pEnumValue != null) ? pEnumValue : (pEnumValue = new EnumValueElements());
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//enum AttributeType:
	//	NUMBER | TEXT;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//Customs:
	//	"custom" "attributes" customAttributes+=CustomAttribute customAttributes+=CustomAttribute* "end";
	public CustomsElements getCustomsAccess() {
		return (pCustoms != null) ? pCustoms : (pCustoms = new CustomsElements());
	}
	
	public ParserRule getCustomsRule() {
		return getCustomsAccess().getRule();
	}

	//Character:
	//	"character" name=ID ("uses" template=[Template])? properties+=Property* "end";
	public CharacterElements getCharacterAccess() {
		return (pCharacter != null) ? pCharacter : (pCharacter = new CharacterElements());
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//Property:
	//	DefaultProperty | CustomProperty;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//DefaultProperty:
	//	FullName | Description | Type | Age | Sex;
	public DefaultPropertyElements getDefaultPropertyAccess() {
		return (pDefaultProperty != null) ? pDefaultProperty : (pDefaultProperty = new DefaultPropertyElements());
	}
	
	public ParserRule getDefaultPropertyRule() {
		return getDefaultPropertyAccess().getRule();
	}

	//FullName:
	//	"full name" value=STRING comment=COMMENT?;
	public FullNameElements getFullNameAccess() {
		return (pFullName != null) ? pFullName : (pFullName = new FullNameElements());
	}
	
	public ParserRule getFullNameRule() {
		return getFullNameAccess().getRule();
	}

	//Description:
	//	"description" value=STRING comment=COMMENT?;
	public DescriptionElements getDescriptionAccess() {
		return (pDescription != null) ? pDescription : (pDescription = new DescriptionElements());
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//Type:
	//	"type" value=CharaType comment=COMMENT?;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//enum CharaType:
	//	PC | NPC;
	public CharaTypeElements getCharaTypeAccess() {
		return (unknownRuleCharaType != null) ? unknownRuleCharaType : (unknownRuleCharaType = new CharaTypeElements());
	}
	
	public EnumRule getCharaTypeRule() {
		return getCharaTypeAccess().getRule();
	}

	//Age:
	//	"age" value=INT comment=COMMENT?;
	public AgeElements getAgeAccess() {
		return (pAge != null) ? pAge : (pAge = new AgeElements());
	}
	
	public ParserRule getAgeRule() {
		return getAgeAccess().getRule();
	}

	//Sex:
	//	"sex" value=CharaSex comment=COMMENT?;
	public SexElements getSexAccess() {
		return (pSex != null) ? pSex : (pSex = new SexElements());
	}
	
	public ParserRule getSexRule() {
		return getSexAccess().getRule();
	}

	//enum CharaSex:
	//	male | female;
	public CharaSexElements getCharaSexAccess() {
		return (unknownRuleCharaSex != null) ? unknownRuleCharaSex : (unknownRuleCharaSex = new CharaSexElements());
	}
	
	public EnumRule getCharaSexRule() {
		return getCharaSexAccess().getRule();
	}

	//CustomProperty:
	//	customAttributeRef=[CustomAttributeName] (stringValue=STRING | intValue=INT | enumValue=[EnumValue])
	//	comment=COMMENT?;
	public CustomPropertyElements getCustomPropertyAccess() {
		return (pCustomProperty != null) ? pCustomProperty : (pCustomProperty = new CustomPropertyElements());
	}
	
	public ParserRule getCustomPropertyRule() {
		return getCustomPropertyAccess().getRule();
	}

	//terminal COMMENT:
	//	"["->"]";
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
