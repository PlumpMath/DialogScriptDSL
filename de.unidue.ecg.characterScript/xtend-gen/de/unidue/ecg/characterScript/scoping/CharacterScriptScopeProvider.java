/**
 * generated by Xtext
 */
package de.unidue.ecg.characterScript.scoping;

import com.google.common.base.Objects;
import de.unidue.ecg.characterScript.characterScript.Template;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.scoping.impl.ImportNormalizer;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;
import org.eclipse.xtext.util.Strings;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class CharacterScriptScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  protected ImportNormalizer createImportedNamespaceResolver(final String namespace, final boolean ignoreCase) {
    ImportNormalizer _xblockexpression = null;
    {
      String newNamespace = namespace;
      boolean _isEmpty = Strings.isEmpty(namespace);
      boolean _not = (!_isEmpty);
      if (_not) {
        String _plus = (newNamespace + ".*");
        newNamespace = _plus;
      }
      ImportNormalizer _createImportedNamespaceResolver = super.createImportedNamespaceResolver(newNamespace, ignoreCase);
      _xblockexpression = (_createImportedNamespaceResolver);
    }
    return _xblockexpression;
  }
  
  protected String getImportedNamespace(final EObject object) {
    String _xblockexpression = null;
    {
      final String importedNamespace = super.getImportedNamespace(object);
      boolean _equals = Objects.equal(importedNamespace, null);
      if (_equals) {
        if ((object instanceof Template)) {
          EClass _eClass = object.eClass();
          final EStructuralFeature feature = _eClass.getEStructuralFeature("name");
          boolean _and = false;
          boolean _notEquals = (!Objects.equal(feature, null));
          if (!_notEquals) {
            _and = false;
          } else {
            EClassifier _eType = feature.getEType();
            Class<? extends Object> _instanceClass = _eType.getInstanceClass();
            boolean _equals_1 = String.class.equals(_instanceClass);
            _and = (_notEquals && _equals_1);
          }
          if (_and) {
            Object _eGet = object.eGet(feature);
            return ((String) _eGet);
          }
        }
      }
      _xblockexpression = (importedNamespace);
    }
    return _xblockexpression;
  }
}
