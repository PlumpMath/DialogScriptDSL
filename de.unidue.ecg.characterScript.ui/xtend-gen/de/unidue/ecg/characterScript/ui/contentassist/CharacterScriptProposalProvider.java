/**
 * generated by Xtext
 */
package de.unidue.ecg.characterScript.ui.contentassist;

import de.unidue.ecg.characterScript.characterScript.AttributeType;
import de.unidue.ecg.characterScript.characterScript.CustomAttribute;
import de.unidue.ecg.characterScript.characterScript.CustomAttributeName;
import de.unidue.ecg.characterScript.characterScript.CustomProperty;
import de.unidue.ecg.characterScript.characterScript.EnumValue;
import de.unidue.ecg.characterScript.ui.contentassist.AbstractCharacterScriptProposalProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class CharacterScriptProposalProvider extends AbstractCharacterScriptProposalProvider {
  public void completeCustomProperty_EnumValue(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final CustomProperty cp = ((CustomProperty) model);
    CustomAttributeName _customAttributeRef = cp.getCustomAttributeRef();
    EObject _eContainer = _customAttributeRef.eContainer();
    final CustomAttribute ca = ((CustomAttribute) _eContainer);
    EList<EnumValue> _enumValues = null;
    if (ca!=null) {
      _enumValues=ca.getEnumValues();
    }
    boolean _isEmpty = _enumValues.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      super.completeCustomProperty_EnumValue(model, assignment, context, acceptor);
    }
  }
  
  public void complete_INT(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof CustomProperty)) {
      final CustomProperty cp = ((CustomProperty) model);
      CustomAttributeName _customAttributeRef = cp.getCustomAttributeRef();
      EObject _eContainer = _customAttributeRef.eContainer();
      final CustomAttribute ca = ((CustomAttribute) _eContainer);
      boolean _or = false;
      EList<EnumValue> _enumValues = ca.getEnumValues();
      boolean _isEmpty = _enumValues.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _or = true;
      } else {
        AttributeType _type = ca.getType();
        String _name = _type.name();
        boolean _equals = _name.equals("NUMBER");
        boolean _not_1 = (!_equals);
        _or = (_not || _not_1);
      }
      if (_or) {
        return;
      }
    }
    super.complete_INT(model, ruleCall, context, acceptor);
  }
  
  public void complete_STRING(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof CustomProperty)) {
      final CustomProperty cp = ((CustomProperty) model);
      CustomAttributeName _customAttributeRef = cp.getCustomAttributeRef();
      EObject _eContainer = _customAttributeRef.eContainer();
      final CustomAttribute ca = ((CustomAttribute) _eContainer);
      boolean _or = false;
      EList<EnumValue> _enumValues = ca.getEnumValues();
      boolean _isEmpty = _enumValues.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _or = true;
      } else {
        AttributeType _type = ca.getType();
        String _name = _type.name();
        boolean _equals = _name.equals("TEXT");
        boolean _not_1 = (!_equals);
        _or = (_not || _not_1);
      }
      if (_or) {
        return;
      }
    }
    super.complete_STRING(model, ruleCall, context, acceptor);
  }
  
  public void complete_DefaultAttribute(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_DefaultAttribute(model, ruleCall, context, acceptor);
  }
}
