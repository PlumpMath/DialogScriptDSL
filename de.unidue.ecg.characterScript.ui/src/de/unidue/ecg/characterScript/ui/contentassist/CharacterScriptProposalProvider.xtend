/*
 * generated by Xtext
 */
package de.unidue.ecg.characterScript.ui.contentassist

import de.unidue.ecg.characterScript.characterScript.CustomProperty
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.RuleCall
import de.unidue.ecg.characterScript.characterScript.CustomAttribute

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class CharacterScriptProposalProvider extends AbstractCharacterScriptProposalProvider {

	override completeCustomProperty_EnumValue(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val cp = model as CustomProperty
		val ca = cp.customAttributeRef.eContainer as CustomAttribute
		if (!ca?.enumValues.empty)
			super.completeCustomProperty_EnumValue(model, assignment, context, acceptor)
	}

	override complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		if (model instanceof CustomProperty) {
			val cp = model as CustomProperty
			val ca = cp.customAttributeRef.eContainer as CustomAttribute
			if (!ca.enumValues.empty || !ca.type.name.equals("NUMBER"))
				return
		}

		super.complete_INT(model, ruleCall, context, acceptor)
	}

	override complete_STRING(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		if (model instanceof CustomProperty) {
			val cp = model as CustomProperty
			val ca = cp.customAttributeRef.eContainer as CustomAttribute
			if (!ca.enumValues.empty || !ca.type.name.equals("TEXT"))
				return
		}

		super.complete_STRING(model, ruleCall, context, acceptor)
	}
	
	override complete_DefaultAttribute(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DefaultAttribute(model, ruleCall, context, acceptor)
	}

}
